<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coddie.Crud</name>
    </assembly>
    <members>
        <member name="T:Coddie.Crud.Attributes.PropertyIgnoreAttribute">
            <summary>
            The property ignore attribute.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Attributes.PropertyIgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Attributes.PropertyIgnoreAttribute"/> class.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Attributes.PropertyIgnoreAttribute.#ctor(Coddie.Crud.Enums.QueryTypes[])">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Attributes.PropertyIgnoreAttribute"/> class.
            </summary>
            <param name="queryTypes">The query types.</param>
        </member>
        <member name="P:Coddie.Crud.Attributes.PropertyIgnoreAttribute.QueryTypes">
            <summary>
            Gets or sets the query types.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Attributes.PropertyIgnoreAttribute.Equals(System.Object)">
            <summary>
            Equals the given object.
            </summary>
            <param name="obj">The obj.</param>
            <returns>A bool.</returns>
        </member>
        <member name="T:Coddie.Crud.Build.InsertAndGetIdCommandDefCache">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Build.InsertAndGetIdCommandDefCache"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Build.InsertAndGetIdCommandDefCache.commandDictionary">
            <summary>
            Defines the commandDictionary.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Build.InsertAndGetIdCommandDefCache.TryGetValue(System.String,Coddie.Data.Objects.DbCommandDefinition@)">
            <summary>
            Try Get Value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">[out] The value.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.InsertAndGetIdCommandDefCache.GetOrAdd(System.String,Coddie.Data.Objects.DbCommandDefinition)">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The or add.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.InsertAndGetIdCommandDefCache.GetOrAdd(System.String,System.Func{System.String,Coddie.Data.Objects.DbCommandDefinition})">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key <see cref="T:System.String"/>.</param>
            <param name="func">The func <see cref="!:Func&lt;string, DbCommandDefinition&gt;"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Build.InsertCommandDefCache">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Build.InsertCommandDefCache"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Build.InsertCommandDefCache.commandDictionary">
            <summary>
            Defines the commandDictionary.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Build.InsertCommandDefCache.TryGetValue(System.String,Coddie.Data.Objects.DbCommandDefinition@)">
            <summary>
            Try Get Value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">[out] The value.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.InsertCommandDefCache.GetOrAdd(System.String,Coddie.Data.Objects.DbCommandDefinition)">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The or add.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.InsertCommandDefCache.GetOrAdd(System.String,System.Func{System.String,Coddie.Data.Objects.DbCommandDefinition})">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key <see cref="T:System.String"/>.</param>
            <param name="func">The func <see cref="!:Func&lt;string, DbCommandDefinition&gt;"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Build.UpdateCommandDefCache">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Build.UpdateCommandDefCache"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Build.UpdateCommandDefCache.commandDictionary">
            <summary>
            Defines the commandDictionary.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Build.UpdateCommandDefCache.TryGetValue(System.String,Coddie.Data.Objects.DbCommandDefinition@)">
            <summary>
            Try Get Value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">[out] The value.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.UpdateCommandDefCache.GetOrAdd(System.String,Coddie.Data.Objects.DbCommandDefinition)">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The or add.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.UpdateCommandDefCache.GetOrAdd(System.String,System.Func{System.String,Coddie.Data.Objects.DbCommandDefinition})">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key <see cref="T:System.String"/>.</param>
            <param name="func">The func <see cref="!:Func&lt;string, DbCommandDefinition&gt;"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Build.DeleteCommandDefCache">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Build.DeleteCommandDefCache"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Build.DeleteCommandDefCache.commandDictionary">
            <summary>
            Defines the commandDictionary.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Build.DeleteCommandDefCache.TryGetValue(System.String,Coddie.Data.Objects.DbCommandDefinition@)">
            <summary>
            Try Get Value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">[out] The value.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.DeleteCommandDefCache.GetOrAdd(System.String,Coddie.Data.Objects.DbCommandDefinition)">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The or add.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.DeleteCommandDefCache.GetOrAdd(System.String,System.Func{System.String,Coddie.Data.Objects.DbCommandDefinition})">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key <see cref="T:System.String"/>.</param>
            <param name="func">The func <see cref="!:Func&lt;string, DbCommandDefinition&gt;"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Build.GetByIdCommandDefCache">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Build.GetByIdCommandDefCache"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Build.GetByIdCommandDefCache.commandDictionary">
            <summary>
            Defines the commandDictionary.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Build.GetByIdCommandDefCache.TryGetValue(System.String,Coddie.Data.Objects.DbCommandDefinition@)">
            <summary>
            Try Get Value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">[out] The value.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.GetByIdCommandDefCache.GetOrAdd(System.String,Coddie.Data.Objects.DbCommandDefinition)">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The or add.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.GetByIdCommandDefCache.GetOrAdd(System.String,System.Func{System.String,Coddie.Data.Objects.DbCommandDefinition})">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key <see cref="T:System.String"/>.</param>
            <param name="func">The func <see cref="!:Func&lt;string, DbCommandDefinition&gt;"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Build.GetAllCommandDefCache">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Build.GetAllCommandDefCache"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Build.GetAllCommandDefCache.commandDictionary">
            <summary>
            Defines the commandDictionary.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Build.GetAllCommandDefCache.TryGetValue(System.String,Coddie.Data.Objects.DbCommandDefinition@)">
            <summary>
            Try Get Value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">[out] The value.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.GetAllCommandDefCache.GetOrAdd(System.String,Coddie.Data.Objects.DbCommandDefinition)">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The or add.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.GetAllCommandDefCache.GetOrAdd(System.String,System.Func{System.String,Coddie.Data.Objects.DbCommandDefinition})">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key <see cref="T:System.String"/>.</param>
            <param name="func">The func <see cref="!:Func&lt;string, DbCommandDefinition&gt;"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Build.GetWhereIdInCommandDefCache">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Build.GetByIdCommandDefCache"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Build.GetWhereIdInCommandDefCache.commandDictionary">
            <summary>
            Defines the commandDictionary.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Build.GetWhereIdInCommandDefCache.TryGetValue(System.String,Coddie.Data.Objects.DbCommandDefinition@)">
            <summary>
            Try Get Value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">[out] The value.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.GetWhereIdInCommandDefCache.GetOrAdd(System.String,Coddie.Data.Objects.DbCommandDefinition)">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The or add.</returns>
        </member>
        <member name="M:Coddie.Crud.Build.GetWhereIdInCommandDefCache.GetOrAdd(System.String,System.Func{System.String,Coddie.Data.Objects.DbCommandDefinition})">
            <summary>
            Get Or Add.
            </summary>
            <param name="key">The key <see cref="T:System.String"/>.</param>
            <param name="func">The func <see cref="!:Func&lt;string, DbCommandDefinition&gt;"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.DbCommandDefinitionBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.DbCommandDefinitionBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.DbCommandDefinitionBuilder.GetCommandDefinition``1(Coddie.Data.Enums.DbConnectionTypes,Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Gets DbCommand Definition.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
            <param name="queryType">Query type <see cref="T:Coddie.Crud.Enums.QueryTypes"/>.</param>
            <returns>The <see cref="T:Coddie.Data.Objects.DbCommandDefinition"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.InternalFileOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.InternalFileOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.InternalFileOperator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Coddie.Crud.InternalFileOperator"/> class from being created.
            </summary>
        </member>
        <member name="P:Coddie.Crud.InternalFileOperator.Instance">
             <summary>   Gets the ınstance. </summary>
            
             <value> The instance. </value>
        </member>
        <member name="M:Coddie.Crud.InternalFileOperator.Write(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.UInt32)">
             <summary>   Writes the given file. </summary>
            
             <remarks>   Msacli, 29.04.2019. </remarks>
            
             <param name="filePath">     Full pathname of the file. </param>
             <param name="rows">         The rows. </param>
             <param name="writeLine">    (Optional) True to write line. </param>
             <param name="autoFlushLineCount">Line count for file auto flush.</param>
        </member>
        <member name="T:Coddie.Crud.Command.CommandDefinitionExtension">
            <summary>
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.BuildQueryKey``1(Coddie.Data.Enums.DbConnectionTypes,Coddie.Crud.Enums.QueryTypes)">
            <summary>
            The Build Query Key.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connType">The connType <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
            <param name="queryType">Query type <see cref="T:Coddie.Crud.Enums.QueryTypes"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetInsertAndGetIdCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the insert and get identifier command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetInsertCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the insert command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetUpdateCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the update command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetDeleteCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the delete command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetByIdCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the by identifier command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetWhereIdInCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the where identifier in command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetAllCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets all command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetInsertWithIdCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the insert with identifier command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetDeleteWhereIdInCommandFromCache``1(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Gets the delete where identifier in command from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.IsScalarForIdentityInsert(System.Data.IDbConnection)">
            <summary>
            Determines whether [is scalar for identity insert].
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <returns>
              <c>true</c> if [is scalar for identity insert] [the specified connection]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.IsScalarForIdentityInsert(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Determines whether [is scalar for identity insert].
            </summary>
            <param name="connectionType">Database connection type<see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
            <returns>
              <c>true</c> if [is scalar for identity insert] [the specified connection type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Coddie.Crud.Command.CommandDefinitionExtension.GetCommandDefinition``1(Coddie.Data.Enums.DbConnectionTypes,Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Gets the command definition.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionType">Database connection type<see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
            <param name="queryType">Query type<see cref="T:Coddie.Crud.Enums.QueryTypes"/>.</param>
            <returns>DbCommandDefinition instance.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.BaseCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.BaseCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.BaseCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="!:BaseCommandExecutor&lt;T&gt;"/> class.
            </summary>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="P:Coddie.Crud.Command.BaseCommandExecutor.ConnectionType">
            <summary>
            Gets or sets the ConnectionType Connection Type of DbConnection.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.BaseCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object <see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.BaseCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object <see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.BaseCommandExecutor.SetIdentityValue``1(``0,System.Object)">
            <summary>
            Sets identity value into identity property of entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Command.BaseCommandExecutor.SetIdentityValues``1(``0,Coddie.Data.Objects.DbCommandParameter[])">
            <summary>
            Sets identity values into identity properties of entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">entity object</param>
            <param name="outputParameters">Output parameters</param>
            <returns>Returns count of identy propert(y)ies value changed.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.BaseCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.BaseCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.ICommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.ICommandExecutor"/>.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Command.ICommandExecutor.ConnectionType">
            <summary>
            Gets the ConnectionType Connection Type of Query Builder.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.ICommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.ICommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.ICommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.ICommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.DB2CommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.DB2CommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.DB2CommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.DB2CommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.DB2CommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.DB2CommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.DB2CommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.DB2CommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.FirebirdCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.FirebirdCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.FirebirdCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.FirebirdCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.FirebirdCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.FirebirdCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.FirebirdCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.FirebirdCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.MsSqlCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.MsSqlCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.MsSqlCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.MsSqlCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.MsSqlCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.MsSqlCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.MsSqlCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.MsSqlCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.MySqlCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.MySqlCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.MySqlCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.MySqlCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.MySqlCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.MySqlCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.MySqlCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.MySqlCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.NuoDbCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.NuoDbCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.NuoDbCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.NuoDbCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Coddie.Crud.Command.NuoDbCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})" -->
        <member name="M:Coddie.Crud.Command.NuoDbCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.NuoDbCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.NuoDbCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.OdbcCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.OdbcCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.OdbcCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.OdbcCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.OdbcCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OdbcCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OdbcCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OdbcCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.OledbCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.OledbCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.OledbCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.OledbCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.OledbCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OledbCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OledbCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OledbCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.OracleCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.OracleCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.OracleCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.OracleCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.OracleCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OracleCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OracleCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.OracleCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.PgSqlCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.PgSqlCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.PgSqlCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.PgSqlCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.PgSqlCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.PgSqlCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.PgSqlCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.PgSqlCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.SqlBaseCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.SqlBaseCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.SqlBaseCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.SqlBaseCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.SqlBaseCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlBaseCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlBaseCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlBaseCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.SqlCECommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.SqlCECommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.SqlCECommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.SqlCECommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.SqlCECommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlCECommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlCECommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlCECommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlCECommandExecutor.InsertAndReturnIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Inserts the and return ıd ınternal.
            </summary>
            <param name="connection">The connection.</param>
            <param name="entity">The entity.</param>
            <param name="commandTimeout">The command timeout.</param>
            <param name="isScalar">If true, is scalar.</param>
            <returns>A IDbCommandResult.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.SqlDatabaseCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.SqlDatabaseCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.SqlDatabaseCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.SqlDatabaseCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.SqlDatabaseCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlDatabaseCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlDatabaseCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SqlDatabaseCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.SQLiteCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.SQLiteCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.SQLiteCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.SQLiteCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.SQLiteCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SQLiteCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SQLiteCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SQLiteCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.SybaseCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.SybaseCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.SybaseCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.SybaseCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.SybaseCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SybaseCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SybaseCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SybaseCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.SynergyCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.SynergyCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.SynergyCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.SynergyCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.SynergyCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SynergyCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SynergyCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.SynergyCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Command.VistaDbCommandExecutor">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Command.VistaDbCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Command.VistaDbCommandExecutor.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Command.VistaDbCommandExecutor"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Command.VistaDbCommandExecutor.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.VistaDbCommandExecutor.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id with Internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object<see cref="!:IDbCommandResult&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.VistaDbCommandExecutor.InsertListAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Command.VistaDbCommandExecutor.InsertListAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity list And Gets Id List with Internal Transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">entity list for insert and gets id list.<see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns result as object array<see cref="!:IDbCommandResult&lt;object[]&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Condition.Where`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="!:Coddie.Crud.Condition.IWhere&lt;T&gt;" />
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.#ctor(Coddie.Data.Enums.DbConnectionTypes,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Condition.Where`1"/> class.
            </summary>
            <param name="dbConnectionType">Type of the database connection.</param>
            <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.DbConnectionType">
            <summary>
            Gets the type of the database connection.
            </summary>
            <value>
            The type of the database connection.
            </value>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
            <value>
            The query setting.
            </value>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.OrderClauses">
            <summary>
            Gets the orders.
            </summary>
            <value>
            The orders.
            </value>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.SelectedPropertyList">
            <summary>
            Gets Selected Properties.
            this properties will be added as columns into select query.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.SelectedProperties">
            <summary>
            Gets Selected Properties.
            this properties will be added as columns into select query.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.UseTableName">
            <summary>
            Gets Use Table Name setting
            </summary>
        </member>
        <member name="P:Coddie.Crud.Condition.Where`1.TableAlias">
            <summary>
            Gets Alias Info for table alias and use table name setting.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.BindOuterOrderClauses(System.Collections.Generic.List{Coddie.Crud.Objects.OrderClause})">
            <summary>
            Binds the outer order clauses.
            </summary>
            <param name="outerOrderClauses">The outer order clauses.</param>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AppendCondition(Coddie.Crud.Enums.ConditionTypes,Coddie.Crud.Interfaces.IWhere{`0})">
            <summary>
            Appends the builder.
            </summary>
            <param name="conditionType">Condition Type(And/Or)</param>
            <param name="conditionBuilder">The condition builder.</param>
            <returns></returns>
            <exception cref="T:System.Exception">All Contion Builder objects have to same value for {nameof(IsOdbcQuery)} property.</exception>
            <exception cref="T:System.ArgumentException">Condition type should be and/or.</exception>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AppendAndCondition(Coddie.Crud.Interfaces.IWhere{`0})">
            <summary>
            Appends the builder with And condition.
            </summary>
            <param name="conditionBuilder">The condition builder.</param>
            <returns></returns>
            <exception cref="T:System.Exception">All Contion Builder objects have to same value for {nameof(IsOdbcQuery)} property.</exception>
            <exception cref="T:System.ArgumentException">Condition type should be and/or.</exception>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AppendOrCondition(Coddie.Crud.Interfaces.IWhere{`0})">
            <summary>
            Appends the builder with Or condition.
            </summary>
            <param name="conditionBuilder">The condition builder.</param>
            <returns></returns>
            <exception cref="T:System.Exception">All Contion Builder objects have to same value for {nameof(IsOdbcQuery)} property.</exception>
            <exception cref="T:System.ArgumentException">Condition type should be and/or.</exception>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddCondition(Coddie.Crud.Enums.ConditionTypes,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds given predicate condition.
            </summary>
            <param name="conditionType">Condition Type(And/Or)</param>
            <param name="expression">boolean expression.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.BindOuterBaseCommand(Coddie.Crud.Enums.ConditionTypes,Coddie.Data.Objects.BaseDbCommand)">
            <summary>
            Binds the outer base command.
            </summary>
            <param name="conditionType">The condition type.</param>
            <param name="outerCommand">The outer command.</param>
            <returns>A IWhere.</returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddAndCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds given predicate condition as And condition.
            </summary>
            <param name="expression">boolean expression.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddOrCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds given predicate condition as Or condition.
            </summary>
            <param name="expression">boolean expression.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddListContainsCondition``1(Coddie.Crud.Enums.ConditionTypes,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0[],System.Boolean)">
            <summary>
            Add List Contains Condition.
            </summary>
            <typeparam name="TKey">.</typeparam>
            <param name="conditionType">Condition Type(And/Or)</param>
            <param name="keySelector">The keySelector <see cref="!:Expression&lt;Func&lt;T, TKey&gt;&gt;"/>.</param>
            <param name="keys">The keys <see cref="!:TKey[]"/>.</param>
            <param name="isInOrNot">if it is true list should contain value else list should not contain value.</param>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddAndListContainsCondition``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0[],System.Boolean)">
            <summary>
            Add List Contains Condition With And Condition.
            </summary>
            <typeparam name="TKey">.</typeparam>
            <param name="keySelector">The keySelector <see cref="!:Expression&lt;Func&lt;T, TKey&gt;&gt;"/>.</param>
            <param name="keys">The keys <see cref="!:TKey[]"/>.</param>
            <param name="isInOrNot">if it is true list should contain value else list should not contain value.</param>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddOrListContainsCondition``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0[],System.Boolean)">
            <summary>
            Add List Contains Condition With Or Condition.
            </summary>
            <typeparam name="TKey">.</typeparam>
            <param name="keySelector">The keySelector <see cref="!:Expression&lt;Func&lt;T, TKey&gt;&gt;"/>.</param>
            <param name="keys">The keys <see cref="!:TKey[]"/>.</param>
            <param name="isInOrNot">if it is true list should contain value else list should not contain value.</param>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddPropertyForSelect``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Boolean)">
            <summary>
            Adds Property For Select operation.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector">property selector</param>
            <param name="columnAlias">Column Name Alias for selected property.</param>
            <param name="isDistinct">if true column will be added as distinct, else just added.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.RemovePropertyForSelect``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes Property For Select operation.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddOrderClause``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <param name="keySelector"></param>
             <param name="isDescending">if it is true; key selector adds as descending else adds ascending.</param>
             <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.GetBaseCommand">
            <summary>
            Gets the database command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.GetCommand(System.Boolean,System.Boolean)">
            <summary>
            Gets the database command definition.
            </summary>
            <param name="isOdbc">if it is true, command definition is as odbc else not odbc.</param>
            <param name="includeOrder">if it is true, order included else not included.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.GetOrderSql">
            <summary>
            Gets the Ordering part of SQL query.
            </summary>
            <returns>Returns order columns as sql.</returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.GetColumnsSql">
            <summary>
            Gets columns part of Select query.
            </summary>
            <returns>Returns columns as sql.</returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.RemoveAllProperties">
            <summary>
            empty method.
            Removes all object properties.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddJoin``1(Coddie.Crud.Interfaces.IJoinBuilder{`0,``0},Coddie.Crud.Interfaces.IWhere{``0})">
            <summary>
            Adds the join.
            </summary>
            <param name="joinBuilder">The join builder.</param>
            <param name="where2">The where2.</param>
            <returns>A IWhere instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Condition.Where`1.AddSubJoin``2(Coddie.Crud.Interfaces.IJoinBuilder{``0,``1},Coddie.Crud.Interfaces.IWhere{``0},Coddie.Crud.Interfaces.IWhere{``1})">
            <summary>
            Adds the sub join.
            </summary>
            <param name="joinBuilder">The join builder.</param>
            <param name="where1">The where1.</param>
            <param name="where2">The where2.</param>
            <returns>A IWhere instance.</returns>
        </member>
        <member name="T:Coddie.Crud.Condition.WhereBuilderFactory">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="!:Coddie.Crud.Condition.IWhere&lt;T&gt;" />
        </member>
        <member name="M:Coddie.Crud.Condition.WhereBuilderFactory.NewInstance``1(Coddie.Data.Enums.DbConnectionTypes,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Creates new instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConnectionType">Type of the database connection.</param>
            <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
            <returns></returns>
        </member>
        <member name="T:Coddie.Crud.DbConnectionExtension2">
            <summary>
            </summary>
        </member>
        <member name="M:Coddie.Crud.DbConnectionExtension2.BuildBaseCommand``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Builds the base db command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression.</param>
            <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.DbConnectionExtension2.BuildCommandDefinition``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Builds the db command definition.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression.</param>
            <param name="isOdbc">Sends translate request is for as odbc query.</param>
            <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.GetDbRowOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.GetDbRowOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.GetDbRowOperator.GetByIdDbRow``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets SimpleDbRow By Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as SimpleDbRow object instance.</returns>
        </member>
        <member name="M:Coddie.Crud.GetDbRowOperator.GetAllSimpleDbRow``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets All as SimpleDbRow object.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as SimpleDbRow object list.</returns>
        </member>
        <member name="M:Coddie.Crud.GetDbRowOperator.GetByIdListSimpleDbRow``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets SimpleDbRow objects By Id List.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as SimpleDbRow object list.</returns>
        </member>
        <member name="T:Coddie.Crud.WhereSelectDbRowOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.WhereSelectDbRowOperator"/>.
            Read operator for WhereBuilder object.
            </summary>
        </member>
        <member name="M:Coddie.Crud.WhereSelectDbRowOperator.PartialSelectDynamic``1(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Selects Partial SimpleDbRow list.
            </summary>
            <typeparam name="TSource">The type of the source class.</typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="M:Coddie.Crud.WhereSelectDbRowOperator.SelectSkipAndTake``1(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},Coddie.Data.Interfaces.IPageInfo,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Selects Partial SimpleDbRow list with skip and take.
            </summary>
            <typeparam name="TSource">The type of the source class.</typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="pageInfo">page info for skip and take counts. it is optional. if it is null then paging will be disabled.</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="T:Coddie.Crud.Enums.ComparisonTypes">
            <summary>
            Join Comparison Types.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ComparisonTypes.Equal">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ComparisonTypes.NotEqual">
            <summary>
            Not Equal
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ComparisonTypes.LessThan">
            <summary>
            Less Than
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ComparisonTypes.LessOrEqual">
            <summary>
            Less Or Equal
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ComparisonTypes.GreaterThan">
            <summary>
            Greater Than
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ComparisonTypes.GreaterOrEqual">
            <summary>
            Greater Or Equal
            </summary>
        </member>
        <member name="T:Coddie.Crud.Enums.ConditionTypes">
            <summary>
            Condition Types.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ConditionTypes.And">
            <summary>
            Defines the And.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.ConditionTypes.Or">
            <summary>
            Defines the Or.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Enums.JoinTypes">
            <summary>
            Join Types.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.JoinTypes.InnerJoin">
            <summary>
            For Inner Join.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.JoinTypes.FullJoin">
            <summary>
            For Full Join.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.JoinTypes.LeftJoin">
            <summary>
            For Left Join.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.JoinTypes.RightJoin">
            <summary>
            For Right Join.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.JoinTypes.LeftOuterJoin">
            <summary>
            For LeftOuter Join.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.JoinTypes.RightOuterJoin">
            <summary>
            For Right Outer Join.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Enums.QueryTypes">
             <summary>   Values that represent query types. </summary>
            
             <remarks>   Mustafa SAÇLI, 6.05.2019. </remarks>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.Insert">
            <summary>
            An enum constant representing the insert option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.Update">
            <summary>
            An enum constant representing the update option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.Delete">
            <summary>
            An enum constant representing the delete option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.InsertAndGetId">
            <summary>
            An enum constant representing the insert and get id option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.GetById">
            <summary>
            An enum constant representing the get by id option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.GetAll">
            <summary>
            An enum constant representing the get all option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.GetByIdList">
            <summary>
            An enum constant representing the get by id list option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.DeleteWhereIdIn">
            <summary>
            An enum constant representing the delete where id in option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.GetWhereIdIn">
            <summary>
            An enum constant representing the get where id in option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.CreateAsScript">
            <summary>
            An enum constant representing the create as script option.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Enums.QueryTypes.InsertWithId">
            <summary>
            Inserts entity with databse generated id.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Extensions.CommandDefinitionExtension">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Extensions.CommandDefinitionExtension"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Extensions.CommandDefinitionExtension.RebuildParameters``1(Coddie.Data.Objects.DbCommandDefinition,``0)">
            <summary>
            Rebuild Parameters.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="commandDefinition">db command definition</param>
            <param name="entity">The entity <see cref="!:&lt;T&gt;"/>.</param>
            <returns>Simple Command Parameter List<see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Extensions.PropertyExtension">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Extensions.PropertyExtension"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Extensions.PropertyExtension.GetNotContainedProperties(System.Reflection.PropertyInfo[],System.Reflection.PropertyInfo[])">
            <summary>
            List any property of object which is not belong to entity properties.
            </summary>
            <param name="objectProperties">object properties for check</param>
            <param name="entityProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Extensions.PropertyExtension.GetIgnoredProperties(System.Reflection.PropertyInfo[],Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Gets Property list for ignored with given query type.
            </summary>
            <param name="properties">properties will be filtered</param>
            <param name="queryType">query type for ignoring.</param>
            <returns>Returns ignored property list for given query type.</returns>
        </member>
        <member name="M:Coddie.Crud.Extensions.PropertyExtension.GetNotIgnoredProperties(System.Reflection.PropertyInfo[],Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Gets Property list for not ignored with given query type.
            </summary>
            <param name="properties">properties will be filtered</param>
            <param name="queryType">query type for ignoring.</param>
            <returns>Returns not ignored property list for given query type.</returns>
        </member>
        <member name="T:Coddie.Crud.Interfaces.IJoin`1">
            <summary>
            The join interface.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IJoin`1.AddJoin``1(Coddie.Crud.Interfaces.IJoinBuilder{`0,``0},Coddie.Crud.Interfaces.IWhere{``0})">
            <summary>
            Adds the join.
            </summary>
            <param name="joinBuilder">The join builder.</param>
            <param name="where2">The where2.</param>
            <returns>A IWhere instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IJoin`1.AddSubJoin``2(Coddie.Crud.Interfaces.IJoinBuilder{``0,``1},Coddie.Crud.Interfaces.IWhere{``0},Coddie.Crud.Interfaces.IWhere{``1})">
            <summary>
            Adds the sub join.
            </summary>
            <param name="joinBuilder">The join builder.</param>
            <param name="where1">The where1.</param>
            <param name="where2">The where2.</param>
            <returns>A IWhere instance.</returns>
        </member>
        <member name="T:Coddie.Crud.Interfaces.IJoinBuilder`2">
            <summary>
            The join builder.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IJoinBuilder`2.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IJoinBuilder`2.SourceAliasInfo">
            <summary>
            Gets the source alias info.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IJoinBuilder`2.DestinationAliasInfo">
            <summary>
            Gets the destination alias info.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IJoinBuilder`2.JoinType">
            <summary>
            Gets or sets the join type.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IJoinBuilder`2.Conditions">
            <summary>
            Gets the conditions.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IJoinBuilder`2.AddJoin``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},Coddie.Crud.Enums.ComparisonTypes,Coddie.Crud.Enums.ConditionTypes)">
            <summary>
            Adds the join.
            </summary>
            <param name="keySelector1">The key selector1.</param>
            <param name="keySelector2">The key selector2.</param>
            <param name="comparisonType">The comparison type.</param>
            <param name="conditionType">The condition type.</param>
            <returns>A IJoinBuilder.</returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IJoinBuilder`2.GetJoinSql">
            <summary>
            Gets the join sql.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IJoinBuilder`2.GetJoinTypeSql">
            <summary>
            Gets the join type sql.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:Coddie.Crud.Interfaces.ITableAliasInfo">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Interfaces.ITableAliasInfo" />.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.ITableAliasInfo.TableAlias">
            <summary>
            Gets the TableAlias.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.ITableAliasInfo.UseTableName">
            <summary>
            Gets Use Table Name setting
            if it is true, table name of entity will be added else not.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Interfaces.IWhere`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.DbConnectionType">
            <summary>
            Gets the type of the database connection.
            </summary>
            <value>
            The type of the database connection.
            </value>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
            <value>
            The query setting.
            </value>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.OrderClauses">
            <summary>
            Gets the orders.
            </summary>
            <value>
            The orders.
            </value>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.SelectedProperties">
            <summary>
            Gets Selected Properties.
            this properties will be added as columns into select query.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.SelectedPropertyList">
            <summary>
            Gets Selected Properties.
            this properties will be added as columns into select query.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.UseTableName">
            <summary>
            Gets Use Table Name setting
            </summary>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AppendCondition(Coddie.Crud.Enums.ConditionTypes,Coddie.Crud.Interfaces.IWhere{`0})">
            <summary>
            Appends the builder.
            </summary>
            <param name="conditionType">Condition Type(And/Or)</param>
            <param name="conditionBuilder">The condition builder.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AppendAndCondition(Coddie.Crud.Interfaces.IWhere{`0})">
            <summary>
            Appends the builder with And condition.
            </summary>
            <param name="conditionBuilder">The condition builder.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AppendOrCondition(Coddie.Crud.Interfaces.IWhere{`0})">
            <summary>
            Appends the builder with Or condition.
            </summary>
            <param name="conditionBuilder">The condition builder.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddCondition(Coddie.Crud.Enums.ConditionTypes,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds given predicate condition.
            </summary>
            <param name="conditionType">Condition Type(And/Or)</param>
            <param name="expression">.</param>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddAndCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds given predicate condition as And condition.
            </summary>
            <param name="expression">boolean expression.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddOrCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds given predicate condition as Or condition.
            </summary>
            <param name="expression">boolean expression.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddListContainsCondition``1(Coddie.Crud.Enums.ConditionTypes,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0[],System.Boolean)">
            <summary>
            Adds List Contains/Not Contains Condition.
            </summary>
            <typeparam name="TKey">.</typeparam>
            <param name="conditionType">Condition Type(And/Or)</param>
            <param name="keySelector">The keySelector <see cref="!:Expression&lt;Func&lt;T, TKey&gt;&gt;"/>.</param>
            <param name="keys">The keys <see cref="!:TKey[]"/>.</param>
            <param name="isInOrNot">if it is true list should contain value else list should not contain value.</param>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddAndListContainsCondition``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0[],System.Boolean)">
            <summary>
            Add List Contains Condition With And Condition.
            </summary>
            <typeparam name="TKey">.</typeparam>
            <param name="keySelector">The keySelector <see cref="!:Expression&lt;Func&lt;T, TKey&gt;&gt;"/>.</param>
            <param name="keys">The keys <see cref="!:TKey[]"/>.</param>
            <param name="isInOrNot">if it is true list should contain value else list should not contain value.</param>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddOrListContainsCondition``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0[],System.Boolean)">
            <summary>
            Add List Contains Condition With Or Condition.
            </summary>
            <typeparam name="TKey">.</typeparam>
            <param name="keySelector">The keySelector <see cref="!:Expression&lt;Func&lt;T, TKey&gt;&gt;"/>.</param>
            <param name="keys">The keys <see cref="!:TKey[]"/>.</param>
            <param name="isInOrNot">if it is true list should contain value else list should not contain value.</param>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddOrderClause``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <param name="keySelector"></param>
             <param name="isDescending"></param>
             <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.RemovePropertyForSelect``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes Property For Select operation.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.AddPropertyForSelect``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Boolean)">
            <summary>
            Adds Property For Select operation.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector">property selector</param>
            <param name="columnAlias">Column Name Alias for selected property.</param>
            <param name="isDistinct">if true column will be added as distinct, else just added.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.GetBaseCommand">
            <summary>
            Gets the database command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.GetCommand(System.Boolean,System.Boolean)">
            <summary>
            Gets the database command definition.
            </summary>
            <param name="isOdbc">if it is true, command definition is as odbc else not odbc.</param>
            <param name="includeOrder">if it is true, order included else not included.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.GetOrderSql">
            <summary>
            Gets the Ordering part of SQL query.
            </summary>
            <returns>Returns order columns as sql.</returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.GetColumnsSql">
            <summary>
            Gets columns part of Select query.
            </summary>
            <returns>Returns columns as sql.</returns>
        </member>
        <member name="M:Coddie.Crud.Interfaces.IWhere`1.RemoveAllProperties">
            <summary>
            Removes all object properties.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Interfaces.IWhere`1.TableAlias">
            <summary>
            Gets Alias Info for table alias and use table name setting.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Join.JoinBuilder`2">
            <summary>
            The join builder.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Join.JoinBuilder`2.#ctor(Coddie.Crud.Enums.JoinTypes,Coddie.Data.Interfaces.IQuerySetting,Coddie.Crud.Interfaces.ITableAliasInfo,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Initializes a new instance of the <see cref="!:JoinBuilder"/> class.
            </summary>
            <param name="joinType">The join type.</param>
            <param name="querySetting">The query setting.</param>
            <param name="sourceTableAlias">The source table alias.</param>
            <param name="destinationTableAlias">The destination table alias.</param>
        </member>
        <member name="P:Coddie.Crud.Join.JoinBuilder`2.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Join.JoinBuilder`2.JoinType">
            <summary>
            Gets or sets the join type.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Join.JoinBuilder`2.SourceAliasInfo">
            <summary>
            Gets the source alias info.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Join.JoinBuilder`2.DestinationAliasInfo">
            <summary>
            Gets the destination alias info.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Join.JoinBuilder`2.Conditions">
            <summary>
            Gets the conditions.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Join.JoinBuilder`2.AddJoin``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},Coddie.Crud.Enums.ComparisonTypes,Coddie.Crud.Enums.ConditionTypes)">
            <summary>
            Adds the join.
            </summary>
            <param name="keySelector1">The key selector1.</param>
            <param name="keySelector2">The key selector2.</param>
            <param name="comparisonType">The comparison type.</param>
            <param name="conditionType">The condition type.</param>
            <returns>A IJoinBuilder.</returns>
        </member>
        <member name="M:Coddie.Crud.Join.JoinBuilder`2.GetJoinSql">
            <summary>
            Gets the join sql.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Coddie.Crud.Join.JoinBuilder`2.GetJoinTypeSql">
            <summary>
            Gets the join type sql.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Coddie.Crud.Join.JoinBuilder`2.GetComparionString(Coddie.Crud.Enums.ComparisonTypes)">
            <summary>
            Gets the comparion string.
            </summary>
            <param name="comparisonType">The comparison type.</param>
            <returns>A string.</returns>
        </member>
        <member name="T:Coddie.Crud.Join.JoinBuilderFactory">
            <summary>
            The join builder factory.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Join.JoinBuilderFactory.BuildJoin``2(Coddie.Crud.Enums.JoinTypes,Coddie.Data.Interfaces.IQuerySetting,Coddie.Crud.Interfaces.ITableAliasInfo,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Builds the join.
            </summary>
            <param name="joinType">The join type.</param>
            <param name="querySetting">The query setting.</param>
            <param name="sourceTableAlias">The source table alias.</param>
            <param name="destinationTableAlias">The destination table alias.</param>
            <returns>A IJoinBuilder.</returns>
        </member>
        <member name="T:Coddie.Crud.Objects.JoinCondition">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Objects.JoinCondition" />.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.JoinCondition.Source">
            <summary>
            Gets or sets the source.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.JoinCondition.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.JoinCondition.ComparisonType">
            <summary>
            Gets or sets the comparison type.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Objects.SimpleProperty">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Objects.SimpleProperty" />.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.SimpleProperty.PropertyName">
            <summary>
            Gets or sets the PropertyName .
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.SimpleProperty.EntityType">
            <summary>
            Gets, Sets Entity Type.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.SimpleProperty.ColumnAlias">
            <summary>
            Gets, sets Column Alias.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.SimpleProperty.IsDistinct">
            <summary>
            Gets or sets a value indicating whether is distinct.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.SimpleProperty.TableAliasInfo">
            <summary>
            Gets, sets Alias Info for table alias and use table name setting.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Objects.SimpleProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Coddie.Crud.Objects.SimpleProperty.GetColumnName(Coddie.Data.Interfaces.IQuerySetting,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Gets Column Name from Property Name and Entity Type.
            </summary>
            <param name="querySetting">Query Setting for building full column name.</param>
            <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
            <returns>returns string instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Objects.SimpleProperty.GetColumnNameV2(Coddie.Data.Interfaces.IQuerySetting)">
            <summary>
            Gets Column Name from Property Name and Entity Type.
            </summary>
            <param name="querySetting">Query Setting for building full column name.</param>
            <returns>returns string instance.</returns>
        </member>
        <member name="T:Coddie.Crud.Objects.TableAliasInfo">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Objects.TableAliasInfo" />.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.TableAliasInfo.TableAlias">
            <summary>
            Gets the TableAlias.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.TableAliasInfo.UseTableName">
            <summary>
            Gets Use Table Name setting
            if it is true, table name of entity will be added else not.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Objects.TableAliasInfo.New(System.String,System.Boolean)">
            <summary>
            Creates new instance for given parameters.
            </summary>
            <param name="aliasName"></param>
            <param name="useTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Objects.TableAliasInfo.SetAlias(System.String)">
            <summary>
            Sets Table alias.
            </summary>
            <param name="alias"></param>
        </member>
        <member name="M:Coddie.Crud.Objects.TableAliasInfo.SetUseTableName(System.Boolean)">
            <summary>
            Sets use table name.
            </summary>
            <param name="useTableName"></param>
        </member>
        <member name="M:Coddie.Crud.Objects.TableAliasInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Coddie.Crud.Objects.OrderClause">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Objects.OrderClause" />.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Objects.OrderClause.IsDescending">
            <summary>
            Gets or sets the IsDescending.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Objects.OrderClause.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Coddie.Crud.Translation.Evaluator">
            <summary>
            Evaluator sınıfı bize local değişken referanslarının (lambda ifadeleri içinde olan anonymous
            metotları) expressions tree yapısına çevrilmesini sağlar. The Evaluator class is responsible
            for creating the expression tree (of the anonymous methods in lambda expressions).
            Referrer: http://blogs.msdn.com/b/mattwar/archive/2007/08/01/linq-building-an-iqueryable-provider-part-iii.aspx
            </summary>
        </member>
        <member name="M:Coddie.Crud.Translation.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary> Performs evaluation and replacement of independent sub-trees </summary> <param
            name="expression">The root of the expression tree.</param> <param
            name="fnCanBeEvaluated">A function that decides whether a given expression node can be
            part of the local function.</param> <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary> Performs evaluation and replacement of independent sub-trees </summary> <param
            name="expression">The root of the expression tree.</param> <returns>A new tree with
            sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:Coddie.Crud.Translation.Evaluator.SubtreeEvaluator">
            <summary> Evaluates and replaces sub-trees when first candidate is reached (top-down) </summary>
        </member>
        <member name="T:Coddie.Crud.Translation.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly be part of an
            evaluated sub-tree.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Translation.InternalQueryTranslator`1">
            <summary>
            QueryTranslator sınıfı lambda ifadelerini Visitor deseni aracılığı ile handle edebilmemizi
            sağlamaktadır. VisitConstant tiplerinde 'Contains' desteğini sağladım. The QueryTranslator
            class allows us to use Visitor design pattern to handle the lambda expressions. The
            VisitConstant types have support for the "Contains" method.
            Referrer: http://blogs.msdn.com/b/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </summary>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator`1.ConnectionType">
            <summary>
            Gets the type of the connection.
            </summary>
            <value>The type of the connection.</value>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator`1.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator`1.UseTableName">
            <summary>
            Gets Use Table Name setting
            </summary>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator`1.IsOracleConnection">
            <summary>
            Gets a value indicating whether is oracle connection.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.#ctor(Coddie.Data.Enums.DbConnectionTypes,Coddie.Crud.Interfaces.ITableAliasInfo)">
             <summary>
            
             </summary>
             <param name="connectionType">Db Connection Type.</param>
             <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Translates the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>A BaseDbCommand.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.TranslateAsCommandDefinition(System.Linq.Expressions.Expression,System.Boolean)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="isOdbc"></param>
             <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.InitializeFields">
            <summary>
            Initializes the fields.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator`1.IsNullConstant(System.Linq.Expressions.Expression)">
            <summary>
            Is the null constant.
            </summary>
            <param name="exp">The exp.</param>
            <returns>A bool.</returns>
        </member>
        <member name="T:Coddie.Crud.Translation.InternalQueryTranslator2`1">
            <summary>
            QueryTranslator sınıfı lambda ifadelerini Visitor deseni aracılığı ile handle edebilmemizi
            sağlamaktadır. VisitConstant tiplerinde 'Contains' desteğini sağladım. The QueryTranslator
            class allows us to use Visitor design pattern to handle the lambda expressions. The
            VisitConstant types have support for the "Contains" method.
            Referrer: http://blogs.msdn.com/b/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </summary>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator2`1.ConnectionType">
            <summary>
            Gets the type of the connection.
            </summary>
            <value>The type of the connection.</value>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator2`1.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator2`1.UseTableName">
            <summary>
            Gets Use Table Name setting
            </summary>
        </member>
        <member name="P:Coddie.Crud.Translation.InternalQueryTranslator2`1.IsOracleConnection">
            <summary>
            Gets a value indicating whether is oracle connection.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.#ctor(Coddie.Data.Enums.DbConnectionTypes,Coddie.Crud.Interfaces.ITableAliasInfo)">
             <summary>
            
             </summary>
             <param name="connectionType">Db Connection Type.</param>
             <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Translates the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>A BaseDbCommand.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.TranslateAsCommandDefinition(System.Linq.Expressions.Expression,System.Boolean)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="isOdbc"></param>
             <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.InitializeFields">
            <summary>
            Initializes the fields.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member.
            </summary>
            <param name="node">The node.</param>
            <returns>An Expression.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.InternalQueryTranslator2`1.IsNullConstant(System.Linq.Expressions.Expression)">
            <summary>
            Is the null constant.
            </summary>
            <param name="exp">The exp.</param>
            <returns>A bool.</returns>
        </member>
        <member name="T:Coddie.Crud.Translation.SimpleQueryTranslator">
            <summary>
            QueryTranslator sınıfı lambda ifadelerini Visitor deseni aracılığı ile handle edebilmemizi
            sağlamaktadır. VisitConstant tiplerinde 'Contains' desteğini sağladım. The QueryTranslator
            class allows us to use Visitor design pattern to handle the lambda expressions. The
            VisitConstant types have support for the "Contains" method.
            Referrer: http://blogs.msdn.com/b/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </summary>
        </member>
        <member name="M:Coddie.Crud.Translation.SimpleQueryTranslator.TranslateExpression``1(Coddie.Data.Enums.DbConnectionTypes,System.Linq.Expressions.Expression,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Translate boolean expression into odbc sql query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionType">Db Connection Type</param>
            <param name="expression">Boolean expression</param>
            <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
            <returns>Returns BaseDbCommand object instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Translation.SimpleQueryTranslator.TranslateExpressionForCommandDefinition``1(Coddie.Data.Enums.DbConnectionTypes,System.Linq.Expressions.Expression,System.Boolean,Coddie.Crud.Interfaces.ITableAliasInfo)">
            <summary>
            Translate boolean expression into odbc sql query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionType">Db Connection Type</param>
            <param name="expression">Boolean expression</param>
            <param name="isOdbc">translate as odbc or not.</param>
            <param name="tableAliasInfo">Table Alias Info for table alias and use table name setting.</param>
            <returns>Returns DbCommandDefinition object instance.</returns>
        </member>
        <member name="T:Coddie.Crud.PartialDeleteOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.PartialDeleteOperator"/>.
            Delete operator for predicate and given objects.
            </summary>
        </member>
        <member name="M:Coddie.Crud.PartialDeleteOperator.DeleteAll``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Deletes all entities with given condition.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="deletePropertyValues">Delete property values.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value. </param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.PartialDeleteOperator.DeleteAll``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Deletes all entities with given condition.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression.</param>
            <param name="transaction">The transaction.</param>
            <param name="commandTimeout">The command timeout.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="T:Coddie.Crud.PartialInsertOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.PartialInsertOperator"/>.
            Insert operator for predicate and given objects.
            </summary>
        </member>
        <member name="M:Coddie.Crud.PartialInsertOperator.PartialInsert``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            inserts the partial entity.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="insertPropertyValues">The insert property values.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value. </param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.PartialInsertOperator.PartialInsertAndReturnId``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            inserts the partial entity and return id.
            </summary>
            <typeparam name="T">Entity instance.</typeparam>
            <param name="connection">Database connection</param>
            <param name="insertPropertyValues"></param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value. </param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="T:Coddie.Crud.PartialReadOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.PartialReadOperator"/>.
            Read operator for predicate and given objects.
            </summary>
        </member>
        <member name="M:Coddie.Crud.PartialReadOperator.PartialSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32},Coddie.Crud.Ordering.IOrderBuilder{``0})">
            <summary>
            Selects Partial entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection</param>
            <param name="expression">condition expression</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <param name="orderBuilder">Order operators.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="M:Coddie.Crud.PartialReadOperator.SelectSkipAndTake``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Coddie.Data.Interfaces.IPageInfo,System.Data.IDbTransaction,System.Nullable{System.Int32},Coddie.Crud.Ordering.IOrderBuilder{``0})">
            <summary>
            Selects Partial entities with skip and take.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="connection">Database connection</param>
            <param name="expression">condition expression</param>
            <param name="pageInfo">page info for skip and take counts. it is optional. if it is null then paging will be disabled.</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <param name="orderBuilder">Order operators.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="T:Coddie.Crud.PartialUpdateOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.PartialUpdateOperator"/>.
            Update operator for predicate and given objects.
            </summary>
        </member>
        <member name="M:Coddie.Crud.PartialUpdateOperator.PartialUpdate``1(System.Data.IDbConnection,System.Object,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates partially with given conditions and parameters.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="setPropertyValues">update query set clause properties.</param>
            <param name="wherePropertyValues">update query where clause properties.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value. </param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.PartialUpdateOperator.PartialUpdate``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates partially with given conditions and parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection</param>
            <param name="updatePropertyValues">update query set clause properties.</param>
            <param name="expression">Boolean expression for update where clause.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value. </param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="T:Coddie.Crud.AsyncBulkCrudOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.AsyncBulkCrudOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.AsyncBulkCrudOperator.InsertAndGetIdInternalAsync``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts And Get Id Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">Entity list for operation<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:System.Threading.Tasks.Task&lt;long&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncBulkCrudOperator.InsertInternalAsync``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">Entity list for operation<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>The <see cref="!:System.Threading.Tasks.Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncBulkCrudOperator.UpdateInternalAsync``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Updates Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">Entity list for operation<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncBulkCrudOperator.DeleteInternalAsync``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Deletes Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">Entity list for operation<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncBulkCrudOperator.InsertAndGetIdAsync``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts And Get Id Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">Entity list for operation<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;long&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncBulkCrudOperator.InsertAsync``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">Entity list for operation<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncBulkCrudOperator.UpdateAsync``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entityList">Entity list for operation<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.AsyncCrudOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.AsyncCrudOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.InsertInternalAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.InsertAndGetIdInternalAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts And Get Id Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.UpdateInternalAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Updates Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.DeleteInternalAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Deletes Async With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.InsertAndGetIdAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts And Get Id Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.DeleteAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Deletes Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncCrudOperator.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Deletes By Id Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValue">The idValue <see cref="T:System.Object"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns execution result<see cref="!:Task&lt;int&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.AsyncGetOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.AsyncGetOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.AsyncGetOperator.GetDynamicByIdAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets Dynamic By Id Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValue">id value <see cref="T:System.Object"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">DbCommand timeout<see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns dynamic object instace<see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncGetOperator.GetByIdAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets By Id Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValue">The idValue <see cref="T:System.Object"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns entity instance<see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncGetOperator.GetAllAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,Coddie.Data.Interfaces.IPageInfo,System.Nullable{System.Int32})">
            <summary>
            Gets All Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns entity list<see cref="!:Task&lt;List&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncGetOperator.GetAllAsDynAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets All As Dyn Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns dynamic object list<see cref="!:Task&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncGetOperator.GetListByIdListAsync``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets List By Id List Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id values.<see cref="!:object[]"/></param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns entity list<see cref="!:Task&lt;List&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.AsyncGetOperator.GetListByIdListAsDynamicAsync``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets List By Id List As Dyn Async.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id values<see cref="!:object[]"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">DbCommand timeout <see cref="!:System.Nullable&lt;int&gt;"/>.</param>
            <returns>Returns dynamic object list<see cref="!:Task&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.AsyncPredicateOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.AsyncPredicateOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.AsyncPredicateOperator.GetInternalAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,Coddie.Crud.Ordering.IOrderBuilder{``0})">
            <summary>
            Gets With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression <see cref="!:Expression&lt;Func&lt;T, bool&gt;&gt;"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="orderBuilder">Order operators.</param>
            <returns>Returns entity list <see cref="!:Task&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.BulkCrudOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.BulkCrudOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.InsertInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.UpdateInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Updates With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.DeleteInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Deletes With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.InsertWithIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts With Id With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.InsertAndGetIdInternal``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Nullable{System.Int32})">
            <summary>
            Inserts entity and Get Id With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.Insert``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.Update``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates entity list.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.Delete``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Deletes entity list.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.InsertWithId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts With Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.BulkCrudOperator.InsertAndGetId``1(System.Data.IDbConnection,System.Collections.Generic.List{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entities">Entity list.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as long.</returns>
        </member>
        <member name="T:Coddie.Crud.CrudOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.CrudOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.InsertInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.UpdateInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Updates With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.DeleteInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Deletes With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.InsertWithIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts With Id With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.InsertAndGetIdInternal``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32})">
            <summary>
            Inserts And Get Id With internal Transaction.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates entity.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Deletes entity.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.InsertWithId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity With Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.InsertAndGetId``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts entity And Get Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="entity">Entity instance.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns execution result as object.</returns>
        </member>
        <member name="M:Coddie.Crud.CrudOperator.DeleteByIdList``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Object[])">
            <summary>
            Deletes entities By Id List.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <param name="idValues">(Optional) DbCommand parameters.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="T:Coddie.Crud.GetDynamicOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.GetDynamicOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.GetDynamicOperator.GetByIdDynamic``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets Dynamic By Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as dynamic object instance.</returns>
        </member>
        <member name="M:Coddie.Crud.GetDynamicOperator.GetAllDynamic``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets All as Dynamic object.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as dynamic object list.</returns>
        </member>
        <member name="M:Coddie.Crud.GetDynamicOperator.GetByIdListDynamic``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets Dynamic objects By Id List.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as dynamic object list.</returns>
        </member>
        <member name="T:Coddie.Crud.GetOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.GetOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.GetOperator.GetById``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets entity By Id.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id column values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns entity instance with given id value(s).</returns>
        </member>
        <member name="M:Coddie.Crud.GetOperator.GetAll``1(System.Data.IDbConnection,System.Data.IDbTransaction,Coddie.Data.Interfaces.IPageInfo,System.Nullable{System.Int32})">
            <summary>
            Get All entities.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="transaction">Database transaction.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity list.</returns>
        </member>
        <member name="M:Coddie.Crud.GetOperator.GetByIdList``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets entities By Id List.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="idValues">id column values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity list with given id values.</returns>
        </member>
        <member name="T:Coddie.Crud.PredicateOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.PredicateOperator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.Select``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,Coddie.Crud.Ordering.IOrderBuilder{``0},Coddie.Data.Interfaces.IPageInfo)">
            <summary>
            Gets list with predicate expression with paging option.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression.</param>
            <param name="transaction">Database transaction.</param>
            <param name="orderBuilder">Order operators.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <returns>Returns as entity list.</returns>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.SelectSkipAndTake``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Coddie.Data.Interfaces.IPageInfo,System.Data.IDbTransaction,Coddie.Crud.Ordering.IOrderBuilder{``0})">
            <summary>
            Gets list with paging for predicate expression.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <param name="transaction">Database transaction.</param>
            <param name="orderBuilder">Order operators.</param>
            <returns>Returns as entity list.</returns>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Gets row count as int for given condition.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">The connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression <see cref="!:Expression&lt;Func&lt;T, System.Boolean&gt;&gt;"/>.</param>
            <param name="transaction">Database transaction.</param>
            <returns>The <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.CountLong``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Gets row count as long for given condition.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">The connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression <see cref="!:Expression&lt;Func&lt;T, System.Boolean&gt;&gt;"/>.</param>
            <param name="transaction">Database transaction.</param>
            <returns>The <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.Any``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Checks result set has any row for given condition.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">The connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression <see cref="!:Expression&lt;Func&lt;T, System.Boolean&gt;&gt;"/>.</param>
            <param name="transaction">Database transaction.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.FirstOrDefault``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,Coddie.Crud.Ordering.IOrderBuilder{``0})">
            <summary>
            Gets first entity with predicate expression.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression.</param>
            <param name="transaction">Database transaction.</param>
            <param name="orderBuilder">Order operators.</param>
            <returns>Returns first entity.</returns>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.LastOrDefault``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,Coddie.Crud.Ordering.IOrderBuilder{``0})">
            <summary>
            Gets last entity with predicate expression.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The predicate expression.</param>
            <param name="transaction">Database transaction.</param>
            <param name="orderBuilder">Order operators.</param>
            <returns>Returns last entity.</returns>
        </member>
        <member name="M:Coddie.Crud.PredicateOperator.SingleOrDefault``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,Coddie.Crud.Ordering.IOrderBuilder{``0})">
            <summary>
            Gets first entity with predicate expression.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="expression">The expression.</param>
            <param name="transaction">Database transaction.</param>
            <param name="orderBuilder">Order operators.</param>
            <returns>Returns first entity.</returns>
        </member>
        <member name="T:Coddie.Crud.WhereDeleteOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.WhereDeleteOperator"/>.
            Read operator for WhereBuilder object.
            </summary>
        </member>
        <member name="M:Coddie.Crud.WhereDeleteOperator.DeleteAll``1(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Deletes all entities with given condition.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="whereClause">where clause</param>
            <param name="transaction">The transaction.</param>
            <param name="commandTimeout">The command timeout.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="T:Coddie.Crud.WhereOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.WhereOperator"/>.
            Read operator for WhereBuilder object.
            </summary>
        </member>
        <member name="M:Coddie.Crud.WhereOperator.PartialSelect``1(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},System.Data.IDbTransaction,Coddie.Data.Interfaces.IPageInfo,System.Nullable{System.Int32})">
            <summary>
            Selects Partial entities with paging option.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="M:Coddie.Crud.WhereOperator.Select``1(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},Coddie.Data.Interfaces.IPageInfo,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Selects Partial entities with paging option.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="T:Coddie.Crud.WhereSelectDynamicOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.WhereSelectDynamicOperator"/>.
            Read operator for WhereBuilder object.
            </summary>
        </member>
        <member name="M:Coddie.Crud.WhereSelectDynamicOperator.PartialSelectDynamic``1(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Selects Partial entities.
            </summary>
            <typeparam name="TSource">The type of the source class.</typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="M:Coddie.Crud.WhereSelectDynamicOperator.SelectSkipAndTake``1(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},Coddie.Data.Interfaces.IPageInfo,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Selects Partial entities with skip and take.
            </summary>
            <typeparam name="TSource">The type of the source class.</typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="pageInfo">page info for skip and take counts. it is optional. if it is null then paging will be disabled.</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="T:Coddie.Crud.WhereSelectOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.WhereSelectOperator"/>.
            Read operator for WhereBuilder object.
            </summary>
        </member>
        <member name="M:Coddie.Crud.WhereSelectOperator.PartialSelect``2(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Selects Partial entities.
            </summary>
            <typeparam name="TSource">The type of the source class.</typeparam>
            <typeparam name="TDest">The type of the destination class.</typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="M:Coddie.Crud.WhereSelectOperator.SelectSkipAndTake``2(System.Data.IDbConnection,Coddie.Crud.Interfaces.IWhere{``0},Coddie.Data.Interfaces.IPageInfo,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Selects Partial entities with skip and take.
            </summary>
            <typeparam name="TSource">The type of the source class.</typeparam>
            <typeparam name="TDest">The type of the destination class.</typeparam>
            <param name="connection">Database connection</param>
            <param name="whereClause">where clause</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="transaction">(Optional) Database Transaction.</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value.</param>
            <returns>Returns as entity array.</returns>
        </member>
        <member name="T:Coddie.Crud.WhereUpdateOperator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.WhereUpdateOperator"/>.
            Read operator for WhereBuilder object.
            </summary>
        </member>
        <member name="M:Coddie.Crud.WhereUpdateOperator.PartialUpdate``1(System.Data.IDbConnection,System.Object,Coddie.Crud.Interfaces.IWhere{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates partially with given conditions and parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Database connection</param>
            <param name="updatePropertyValues">update query set clause properties.</param>
            <param name="whereClause">where clause for update</param>
            <param name="transaction">(Optional) Database Transaction</param>
            <param name="commandTimeout">(Optional) DbCommand timeout value. </param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="T:Coddie.Crud.Constants.DbCrudAppValues">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Constants.DbCrudAppValues"/>.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTimeout">
            <summary>
            Defines the CommandTimeout ==&gt; 1000000.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTextValueFormatKey">
            <summary>
            Defines the CommandTextValueFormatKey ==&gt; "#VALS#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTextTableFormatKey">
            <summary>
            Defines the CommandTextTableFormatKey ==&gt; "#TABLE_NAME#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTextColumnFormatKey">
            <summary>
            Defines the CommandTextColumnFormatKey ==&gt; "#COLUMNS#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTextIdColumnFormat">
            <summary>
            Defines the CommandTextIdColumnFormat ==&gt; "#ID_COL#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTextIdParamFormat">
            <summary>
            Defines the CommandTextIdParamFormat ==&gt; "#ID_PARAM#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTextIdValuesFormat">
            <summary>
            Defines the CommandTextIdValuesFormat ==&gt; "#ID_VALS#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommandTextSqlScriptFormat">
            <summary>
            Defines the CommandTextSqlScriptFormat ==&gt; "#SQL_SCRIPT#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.OracleSequenceExecFormat">
            <summary>
            Oracle Sequence Execution Format ===&gt; SELECT SEQ_{0}.NEXTVAL FROM DUAL.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.NullValue">
            <summary>
            means DbNull.Value.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ErrorFileDateFormat">
            <summary>
            Time Format: yyyy-MM-dd-HH-mm-ss.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.GeneralDateFormat">
            <summary>
            Time Format: yyyy-MM-dd, HH:mm:ss ffffff.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ServerVersionProperty">
            <summary>
            Defines the ServerVersionPropertyy ==&gt; .
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ParameterQueryDelimiter">
            <summary>
            char '|'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.Semicolon">
            <summary>
            char ';'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ConnectionName">
            <summary>
            Defines the connectionName ==&gt; "Connection";.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ServerVersion">
            <summary>
            Defines the serverVersion ==&gt; "ServerVersion".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.AtChar">
            <summary>
            Defines the atChar ==&gt; '@'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.QuestionMark">
            <summary>
            Defines the questionChar ==&gt; '?'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.QuestionMarkString">
            <summary>
            Defines the questionChar ==&gt; "?".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ColonChar">
            <summary>
            Defines the colonChar ==&gt; ':'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ParameterChar">
            <summary>
            Defines the ParameterChar ==&gt; 'p'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.OpeningSquareBracket">
            <summary>
            Defines the OpeningSquareBracket ==&gt; '['.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ClosingSquareBracket">
            <summary>
            Defines the ClosingSquareBracket ==&gt; ']'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.QuoteChar">
            <summary>
            Defines the QuoteChar ==&gt; '"'.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.Emtpy">
            <summary>
            Defines the Emtpy string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CountFormat">
            <summary>
            Defines sql count format ==&gt; SELECT COUNT(1) AS CNT FROM ({0})
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommaChar">
            <summary>
            Defines the QuoteChar ==&gt; ','.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommaCharString">
            <summary>
            Defines the QuoteChar ==&gt; ",".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.SqlScriptFormat">
            <summary>
            Defines the CommandTextSqlScriptFormaty ==&gt; "#SQL_SCRIPT#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.SkipFormat">
            <summary>
            Defines the CommandTextSqlScriptFormaty ==&gt; "#SKIP#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.TakeFormat">
            <summary>
            Defines the CommandTextSqlScriptFormaty ==&gt; "#TAKE#".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.Where">
            <summary>
            Defines "WHERE" string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.OneSpace">
            <summary>
            Defines " " string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.AndOperator">
            <summary>
            Defines "AND" string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.OrOperator">
            <summary>
            Defines "OR" string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.CommaCharAndSpace">
            <summary>
            Defines the QuoteChar ==&gt; ", ".
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.AscOperator">
            <summary>
            Defines "ASC" string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.DescOperator">
            <summary>
            Defines "DESC" string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.StarChar">
            <summary>
            Defines '*' char.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.StarString">
            <summary>
            Defines "*" string.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.OpeningBracket">
            <summary>
            Defines the OpeningBracket ==&gt; '('.
            </summary>
        </member>
        <member name="F:Coddie.Crud.Constants.DbCrudAppValues.ClosingBracket">
            <summary>
            Defines the ClosingBracket ==&gt; ')'.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Constants.DbCrudSettings">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Constants.DbCrudSettings"/>.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Constants.DbCrudSettings.LogErrorEnabled">
            <summary>
            Gets, Sets Error Logging.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Constants.DbCrudSettings.EnableExceptionHandling">
            <summary>
            Enables the inner exception handling.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Constants.DbCrudSettings.DisableExceptionHandling">
            <summary>
            Disables the inner exception handling.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Constants.DbCrudSettings.ConnectionAutoOpen">
            <summary>
            Gets, Sets Connection Auto Open.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Constants.DbCrudSettings.EnableConnectionAutoOpen">
            <summary>
            Enables the connection auto open mode.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Constants.DbCrudSettings.DisableConnectionAutoOpen">
            <summary>
            Disables the connection auto open mode.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Constants.DbCrudSettings.LogQuery">
            <summary>
            Gets, Sets (Enable/Disable) Query Logging.
            </summary>
        </member>
        <member name="T:Coddie.Crud.Helpers.InternalLogHelper">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Helpers.InternalLogHelper"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Helpers.InternalLogHelper.LogException(System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs Exception.
            </summary>
            <param name="e">The e <see cref="T:System.Exception"/>.</param>
            <param name="memberName">caller Name <see cref="T:System.String"/>.</param>
            <param name="sourceFilePath">Source File Path.</param>
            <param name="sourceLineNumber">The callerLineNumber <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="P:Coddie.Crud.Helpers.InternalLogHelper.AssemblyDirectory">
            <summary>
            Gets the AssemblyDirectory.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Helpers.InternalLogHelper.TraceLogQuery(System.String)">
            <summary>
            Traces the log query.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Coddie.Crud.Helpers.InternalLogHelper.LogQuery(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Logs the query.
            </summary>
            <param name="data">The data.</param>
            <param name="isWriteLine">If true, is write line.</param>
        </member>
        <member name="T:Coddie.Crud.Ordering.IOrderBuilder`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="P:Coddie.Crud.Ordering.IOrderBuilder`1.DbConnectionType">
            <summary>
            Gets the type of the database connection.
            </summary>
            <value>
            The type of the database connection.
            </value>
        </member>
        <member name="P:Coddie.Crud.Ordering.IOrderBuilder`1.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
            <value>
            The query setting.
            </value>
        </member>
        <member name="P:Coddie.Crud.Ordering.IOrderBuilder`1.Orders">
            <summary>
            Gets the orders.
            </summary>
            <value>
            The orders.
            </value>
        </member>
        <member name="M:Coddie.Crud.Ordering.IOrderBuilder`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Adds the order.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="isDescending">if set to <c>true</c> [is descending].</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Ordering.IOrderBuilder`1.RemoveOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes the order clause.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Ordering.IOrderBuilder`1.GetOrderSql">
            <summary>
            Gets the Ordering part of SQL query.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Coddie.Crud.Ordering.OrderBuilder`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:Coddie.Crud.Ordering.IOrderBuilder`1" />
        </member>
        <member name="M:Coddie.Crud.Ordering.OrderBuilder`1.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="!:WhereBuilder&lt;T&gt;"/> class.
            </summary>
            <param name="dbConnectionType">Type of the database connection.</param>
        </member>
        <member name="P:Coddie.Crud.Ordering.OrderBuilder`1.DbConnectionType">
            <summary>
            Gets the type of the database connection.
            </summary>
            <value>
            The type of the database connection.
            </value>
        </member>
        <member name="P:Coddie.Crud.Ordering.OrderBuilder`1.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
            <value>
            The query setting.
            </value>
        </member>
        <member name="P:Coddie.Crud.Ordering.OrderBuilder`1.Orders">
            <summary>
            Gets the orders.
            </summary>
            <value>
            The orders.
            </value>
        </member>
        <member name="M:Coddie.Crud.Ordering.OrderBuilder`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Adds Order Clause.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector">key selector for ordering</param>
            <param name="isDescending">if it is true order is descending else ascending.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Ordering.OrderBuilder`1.RemoveOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes the order clause.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:Coddie.Crud.Ordering.OrderBuilder`1.GetOrderSql">
            <summary>
            Gets the Ordering part of SQL query.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Coddie.Crud.Parameter.BaseParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.BaseParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.BaseParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.BaseParameterBuilder"/> class.
            </summary>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="P:Coddie.Crud.Parameter.BaseParameterBuilder.ConnectionType">
            <summary>
            Gets or sets the ConnectionType Connection Type of DbConnection.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.BaseParameterBuilder.BuildParameters``1(Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Builds Simple Command Parameters from RocketParameter.
            </summary>
            <param name="queryType">Sql Query Type</param>
            <returns>Returns DbCommandParameter list<see cref="T:Coddie.Data.Objects.DbCommandParameter"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Parameter.BaseParameterBuilder.GetParameterFromProperty(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Builds Simple Command Parameter from Property.
            </summary>
            <param name="propertyInfo">The propertyInfo <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <param name="isInput">The isInput <see cref="T:System.Boolean"/>.</param>
            <returns>Returns DbCommandParameter instance<see cref="T:Coddie.Data.Objects.DbCommandParameter"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Parameter.BaseParameterBuilder.RebuildParameters``1(System.Collections.Generic.List{Coddie.Data.Objects.DbCommandParameter},``0)">
            <summary>
            Rebuild Parameters.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="simpleCommandParameters">The simpleCommandParameters <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <returns>Returns DbCommandParameter list<see cref="T:Coddie.Data.Objects.DbCommandParameter"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Parameter.IParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.IParameterBuilder"/>.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Parameter.IParameterBuilder.ConnectionType">
            <summary>
            Gets the ConnectionType Connection Type of DbConnection.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.IParameterBuilder.RebuildParameters``1(System.Collections.Generic.List{Coddie.Data.Objects.DbCommandParameter},``0)">
            <summary>
            Rebuild Parameters.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="simpleCommandParameters">Simple Command parameters.</param>
            <param name="entity">Entity instance.</param>
            <returns>Returns DbCommandParameter list.</returns>
        </member>
        <member name="M:Coddie.Crud.Parameter.IParameterBuilder.BuildParameters``1(Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Builds Simple Command Parameters.
            </summary>
            <param name="queryType">Sql Query Type</param>
            <returns>Returns DbCommandParameter list<see cref="T:Coddie.Data.Objects.DbCommandParameter"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Parameter.DbCommandParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.DbCommandParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.DbCommandParameterBuilder.RebuildParameters``1(System.Collections.Generic.List{Coddie.Data.Objects.DbCommandParameter},``0)">
            <summary>
            Rebuild Parameters.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="simpleCommandParameters">The simpleCommandParameters <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <param name="entity">The entity <see cref="!:T"/>.</param>
            <returns>Simple Command Parameter List<see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Parameter.DB2ParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.DB2ParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.DB2ParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.DB2ParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.ParameterBuilderFactory">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.ParameterBuilderFactory"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.ParameterBuilderFactory.GetParameterBuilder(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Gets IParameterBuilder instance for given Connection type.
            </summary>
            <param name="connectionType">DbConnectionTypes instance.</param>
            <returns>IParameterBuilder instance.</returns>
        </member>
        <member name="M:Coddie.Crud.Parameter.ParameterBuilderFactory.GetBuilder(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Gets IParameterBuilder instance for given Connection type.
            </summary>
            <param name="connectionType">DbConnectionTypes instance.</param>
            <returns>IParameterBuilder instance.</returns>
        </member>
        <member name="T:Coddie.Crud.Parameter.FirebirdParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.FirebirdParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.FirebirdParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.FirebirdParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.MsSqlParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.MsSqlParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.MsSqlParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.MsSqlParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.MySqlParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.MySqlParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.MySqlParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.MySqlParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.NuoDbParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.NuoDbParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.NuoDbParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.NuoDbParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.OdbcParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.OdbcParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.OdbcParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.OdbcParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.OledbParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.OledbParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.OledbParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.OledbParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.OracleParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.OracleParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.OracleParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.OracleParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.PgSqlParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.PgSqlParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.PgSqlParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.PgSqlParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.SqlBaseParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.SqlBaseParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.SqlBaseParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.SqlBaseParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.SqlCEParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.SqlCEParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.SqlCEParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.SqlCEParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.SqlDatabaseParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.SqlDatabaseParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.SqlDatabaseParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.SqlDatabaseParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.SQLiteParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.SQLiteParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.SQLiteParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.SQLiteParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.SybaseParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.SybaseParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.SybaseParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.SybaseParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.SynergyParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.SynergyParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.SynergyParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.SynergyParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.Parameter.VistaDbParameterBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Parameter.VistaDbParameterBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Parameter.VistaDbParameterBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Parameter.VistaDbParameterBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="T:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.EntityProperties">
            <summary>
            Gets, sets entity properties.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.IgnoredProperties">
            <summary>
            Gets, sets ignored properties for entity.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.QuerySetting">
            <summary>
            Gets or sets the QueryAdd.
            </summary>
        </member>
        <member name="F:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1._inputs">
            <summary>
            Defines the _inputs.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.Inputs">
            <summary>
            Gets or sets the Inputs Input parameter properties.
            </summary>
        </member>
        <member name="F:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1._outputs">
            <summary>
            Defines the _outputs.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.Outputs">
            <summary>
            Gets or sets the Outputs Output parameter properties.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.QueryType">
            <summary>
            Gets the QueryType Query Type of Query Type Builder.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.ConnectionType">
            <summary>
            Gets or sets the Connection Type.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.QueryBuilder">
            <summary>
            Gets, Sets Query Builder.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.BuildColumnList">
            <summary>
            Builds Column List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.BuildValueList">
            <summary>
            Builds Value List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.CheckOdbc">
            <summary>
            Checks DbConnection is Odbc connection type.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> if connnection type is one of these (Odbc, DB2Odbc, FirebirdOdbc,
            MySqlOdbc, OracleOdbc, PostgreSqlOdbc, SqlBaseOdbc, SqlOdbc, SynergyOdbc, NuoDb) returns
            true else returns false.
            </returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.CheckOledb">
            <summary>
            Checks DbConnection is Oledb connection type.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> if connnection type is one of these (Oledb, DB2Oledb,
            FirebirdOledb, MySqlOledb, OracleOledb, PostgreSqlOledb, SqlBaseOledb, SqlOledb,
            SynergyOledb) returns true else returns false.
            </returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.PrebuildQuery">
            <summary>
            Prebuild Query. Get query format and replace tableName.
            </summary>
            <returns>Prebuilds query as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
             <summary>
            Builds Query part from object.
             </summary>
             <param name="objectProperties">object properties.</param>
             <param name="isColumnsOrNotValues">if it is true, script will be created for column part else created for values part.</param>
             <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.GetEntityProperties">
            <summary>
            Gets Entity Valid Property list.
            </summary>
            <returns>Gets Entity Valid Property list.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.ThrowExceptionForNotContainedProperties(System.Reflection.PropertyInfo[])">
            <summary>
            Check object any property of object does not belong to entity.
            </summary>
            <param name="objectProperties"></param>
            <exception cref="T:System.Exception">object properties contains any property belong to entity, throws Exception.</exception>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.ThrowExceptionForNotIgnoredProperties(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Checks any ignored property of entity is used for operation.
            </summary>
            <param name="objectProperties"></param>
            <param name="isColumnsOrNotValues"></param>
            <exception cref="T:System.Exception">object properties contains any property belong to entity with given ignorance, throws Exception.</exception>
        </member>
        <member name="M:Coddie.Crud.QueryType.BaseQueryTypeBuilder`1.ThrowAnyInputPropertyFound">
             <summary>
            
             </summary>
             <exception cref="T:System.Exception">throws exception if input properties have not found.</exception>
        </member>
        <member name="T:Coddie.Crud.QueryType.IQueryTypeBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.IQueryTypeBuilder`1"/>.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.IQueryTypeBuilder`1.QueryType">
            <summary>
            Gets the QueryType Query Type of Query Type Builder.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.IQueryTypeBuilder`1.Inputs">
            <summary>
            Gets or sets the Inputs Input parameter properties.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.IQueryTypeBuilder`1.Outputs">
            <summary>
            Gets or sets the Outputs Output parameter properties.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.IQueryTypeBuilder`1.ColumnString">
            <summary>
            Gets Column String.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.IQueryTypeBuilder`1.ValueString">
            <summary>
            Gets Value String.
            </summary>
        </member>
        <member name="P:Coddie.Crud.QueryType.IQueryTypeBuilder`1.QueryBuilder">
            <summary>
            Gets, Sets Query Builder.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.IQueryTypeBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.IQueryTypeBuilder`1.PrebuildQuery">
            <summary>
            Prebuild Query. Get query format and replace tableName.
            </summary>
            <returns>Gets query as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.IQueryTypeBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.IQueryTypeBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.DeleteBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.DeleteBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.DeleteBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteBuilder`1.BuildValueList">
            <summary>
            Builds Value List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.DeleteBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.DeleteWhereIdInBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.QueryTypeBuilderFactory">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.QueryTypeBuilderFactory"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.QueryTypeBuilderFactory.GetQueryTypeBuilder``1(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Gets Query Type Parameter Builder instance for given connection and query type.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
            <returns>Return an object instance which is implemented from IQueryTypeBuilder.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.QueryTypeBuilderFactory.GetBuilder``1(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Gets Query Type Parameter Builder instance for given connection and query type.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
            <returns>Return an object instance which is implemented from IQueryTypeBuilder.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.GetAllBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.GetAllBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetAllBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.GetAllBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetAllBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetAllBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetAllBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetAllBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetAllBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.GetByIdBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.GetByIdBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.GetByIdBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdBuilder`1.BuildValueList">
            <summary>
            Builds Value List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.GetByIdListBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.GetByIdListBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdListBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.GetByIdListBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdListBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdListBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdListBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdListBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetByIdListBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.GetWhereIdInBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.GetWhereIdInBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetWhereIdInBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.GetWhereIdInBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetWhereIdInBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetWhereIdInBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetWhereIdInBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetWhereIdInBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.GetWhereIdInBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.BuildColumnList">
            <summary>
            Builds Column List as string.
            </summary>
            <returns>Returns Column List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.BuildValueList">
            <summary>
            Builds Value List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertAndGetIdBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.InsertBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.InsertBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.InsertBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.BuildColumnList">
            <summary>
            Builds Column List as string.
            </summary>
            <returns>Returns Column List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.BuildValueList">
            <summary>
            Builds Value List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.InsertWithIdBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.InsertWithIdBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.InsertWithIdBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.BuildColumnList">
            <summary>
            Builds Column List as string.
            </summary>
            <returns>Returns Column List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.BuildValueList">
            <summary>
            Builds Value List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.InsertWithIdBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.QueryType.UpdateBuilder`1">
            <summary>
            Defines the <see cref="T:Coddie.Crud.QueryType.UpdateBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.#ctor(Coddie.Crud.Enums.QueryTypes,Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.QueryType.UpdateBuilder`1"/> class.
            </summary>
            <param name="queryType">QueryTypes instance.</param>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.RebuildQuery(System.String)">
            <summary>
            Rebuilds given query.
            </summary>
            <param name="query">Sql query</param>
            <returns>Rebuilds and returns query.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.BuildColumnList">
            <summary>
            Builds Column List as string.
            </summary>
            <returns>Returns Column List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.BuildValueList">
            <summary>
            Builds Value List as string.
            </summary>
            <returns>Returns Value List as string <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.GetQueryFormat">
            <summary>
            Returns Format of Query according to QueryType.
            </summary>
            <returns>Returns query format as string.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.BuildBaseCommand(System.Object)">
            <summary>
            Builds Command from values object
            </summary>
            <param name="obj">valuesObject</param>
            <returns>BaseCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.BuildQueryPartFromObject(System.Reflection.PropertyInfo[],System.Boolean)">
            <summary>
            Builds Query part from object.
            </summary>
            <param name="objectProperties">object properties.</param>
            <param name="isColumnsOrNotValues">
            if it is true, script will be created for column part else created for values part.
            </param>
            <returns>Returns sql script.</returns>
        </member>
        <member name="M:Coddie.Crud.QueryType.UpdateBuilder`1.GetBaseDbCommandFromObject(System.Object,System.Boolean)">
            <summary>
            Gets Base DbCommand.
            </summary>
            <param name="obj">value object</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.BaseQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.BaseQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.BaseQueryBuilder"/> class.
            </summary>
            <param name="connectionType">DbConnectionTypes instance.</param>
        </member>
        <member name="P:Coddie.Crud.Query.BaseQueryBuilder.ConnectionType">
            <summary>
            Gets or sets the Connection Type.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Query.BaseQueryBuilder.QuerySetting">
            <summary>
            Gets or sets the Query Options.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.CheckOdbc">
            <summary>
            Checks DbConnection is Odbc connection type.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> if connnection type is one of these (Odbc, DB2Odbc, FirebirdOdbc,
            MySqlOdbc, OracleOdbc, PostgreSqlOdbc, SqlBaseOdbc, SqlOdbc, SynergyOdbc, NuoDb) returns
            true else returns false.
            </returns>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.CheckOledb">
            <summary>
            Checks DbConnection is Oledb connection type.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> if connnection type is one of these (Oledb, DB2Oledb,
            FirebirdOledb, MySqlOledb, OracleOledb, PostgreSqlOledb, SqlBaseOledb, SqlOledb,
            SynergyOledb) returns true else returns false.
            </returns>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.FullTableName``1(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Gets Table Name with Schema includes connection type prefix-suffix.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connType">The connType <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.BuildQuery``1(Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Builds Query.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="queryType">Query type <see cref="T:Coddie.Crud.Enums.QueryTypes"/>.</param>
            <returns>Returns sql query.</returns>
        </member>
        <member name="P:Coddie.Crud.Query.BaseQueryBuilder.IsOdbc">
            <summary>
            Gets or sets a value indicating whether IsOdbc Defines connection is odbc connection.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Query.BaseQueryBuilder.IsOledb">
            <summary>
            Gets or sets a value indicating whether IsOledb Defines connection is oledb connection.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.GetPartialDeleteObject``1(System.Object)">
            <summary>
            Gets Partial Delete query object.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="obj">The obj <see cref="T:System.Object"/>.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.GetBaseDbCommandFromObject``1(System.Object,Coddie.Crud.Enums.QueryTypes,System.Boolean)">
            <summary>
            Gets query object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="queryType">QueryTypes instance.</param>
            <param name="isColumnsOrNotValues"></param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.BuildWhereClauseBaseDbCommand``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Builds the where clause query object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.BaseQueryBuilder.BuildBaseCommand``1(System.Object,Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Build Query Object from any object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="queryType">QueryTypes instance.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.IQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.IQueryBuilder"/>.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Query.IQueryBuilder.ConnectionType">
            <summary>
            Gets the ConnectionType Connection Type of Query Builder.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.IQueryBuilder.BuildQuery``1(Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Builds Query.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="queryType">Query type<see cref="T:Coddie.Crud.Enums.QueryTypes"/>.</param>
            <returns>Returns query string<see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:Coddie.Crud.Query.IQueryBuilder.IsOdbc">
            <summary>
            Gets the IsOdbc. Defines connection is odbc connection.
            </summary>
        </member>
        <member name="P:Coddie.Crud.Query.IQueryBuilder.IsOledb">
            <summary>
            Gets the IsOledb Defines connection is oledb connection.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.IQueryBuilder.GetPartialDeleteObject``1(System.Object)">
            <summary>
            Gets Partial Delete Object.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="obj">The obj <see cref="T:System.Object"/>.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.IQueryBuilder.BuildWhereClauseBaseDbCommand``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Builds Where Clause Query Object.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="expression">The expression <see cref="!:Expression&lt;Func&lt;T, bool&gt;&gt;"/>.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.IQueryBuilder.GetBaseDbCommandFromObject``1(System.Object,Coddie.Crud.Enums.QueryTypes,System.Boolean)">
            <summary>
            Gets the query object from object.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="obj">The object.</param>
            <param name="queryType">Type of the query.</param>
            <param name="isColumnsOrNotValues">if set to <c>true</c> [is columns or not values].</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.IQueryBuilder.BuildBaseCommand``1(System.Object,Coddie.Crud.Enums.QueryTypes)">
            <summary>
            Builds Query Object from any object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="queryType">QueryTypes instance.</param>
            <returns>Returns BaseDbCommand instance <see cref="T:Coddie.Data.Objects.BaseDbCommand"/>.</returns>
        </member>
        <member name="P:Coddie.Crud.Query.IQueryBuilder.QuerySetting">
            <summary>
            Gets or sets the Query Options.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.IQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.DB2QueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.DB2QueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.DB2QueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.DB2QueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.DB2QueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.QueryBuilderFactory">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.QueryBuilderFactory"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.QueryBuilderFactory.GetQueryBuilder(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Gets Query Builder instance for given connection type.
            </summary>
            <param name="connectionType">DbConnectionTypes instance.</param>
            <returns>Return an object instance which is implemented from IQueryBuilder.</returns>
        </member>
        <member name="M:Coddie.Crud.Query.QueryBuilderFactory.BuildQueryBuilder(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Builds Query Builder instance for given connection type.
            </summary>
            <param name="connectionType">DbConnectionTypes instance.</param>
            <returns>Return an object instance which is implemented from IQueryBuilder.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.FirebirdQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.FirebirdQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.FirebirdQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.FirebirdQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.FirebirdQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.MsSqlQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.MsSqlQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.MsSqlQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.MsSqlQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.MsSqlQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.MySqlQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.MySqlQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.MySqlQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.MySqlQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.MySqlQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.NuoDbQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.NuoDbQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.NuoDbQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.NuoDbQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.NuoDbQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.OdbcQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.OdbcQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.OdbcQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.OdbcQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.OdbcQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.OledbQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.OledbQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.OledbQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.OledbQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.OledbQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.OracleQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.OracleQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.OracleQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.OracleQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.OracleQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.PgSqlQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.PgSqlQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.PgSqlQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.PgSqlQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.PgSqlQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.SqlBaseQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.SqlBaseQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.SqlBaseQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.SqlBaseQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.SqlBaseQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.SqlCEQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.SqlCEQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.SqlCEQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.SqlCEQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.SqlCEQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.SqlDatabaseQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.SqlDatabaseQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.SqlDatabaseQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.SqlDatabaseQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.SqlDatabaseQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.SQLiteQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.SQLiteQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.SQLiteQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.SQLiteQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.SQLiteQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.SybaseQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.SybaseQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.SybaseQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.SybaseQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.SybaseQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.SynergyQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.SynergyQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.SynergyQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.SynergyQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.SynergyQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Query.VistaDbQueryBuilder">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Query.VistaDbQueryBuilder"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Query.VistaDbQueryBuilder.#ctor(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Coddie.Crud.Query.VistaDbQueryBuilder"/> class.
            </summary>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
        </member>
        <member name="M:Coddie.Crud.Query.VistaDbQueryBuilder.GetIdentityInsertFormat">
            <summary>
            Gets Identity Insert format for QueryBuilder Connection Type.
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Scripts.ScriptCreator">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Scripts.ScriptCreator"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Scripts.ScriptCreator.CreateDDL``1(Coddie.Data.Enums.DbConnectionTypes)">
            <summary>
            Creates DDL of IDbConnection instance with T type.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connectionType">Connection type <see cref="T:Coddie.Data.Enums.DbConnectionTypes"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Coddie.Crud.Scripts.ScriptCreator.GetInnerScript(System.Reflection.PropertyInfo[],System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The GetInnerScript.
            </summary>
            <param name="properties">The properties <see cref="!:PropertyInfo[]"/>.</param>
            <param name="columns">The columns <see cref="!:IDictionary&lt;string, string&gt;"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Coddie.Crud.Scripts.ScriptCreatorHelper">
            <summary>
            Defines the <see cref="T:Coddie.Crud.Scripts.ScriptCreatorHelper"/>.
            </summary>
        </member>
        <member name="M:Coddie.Crud.Scripts.ScriptCreatorHelper.CreateDDL``1(System.Data.IDbConnection)">
            <summary>
            The CreateDDL.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="connection">Database Connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
    </members>
</doc>
