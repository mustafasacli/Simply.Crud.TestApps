<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simply.Data</name>
    </assembly>
    <members>
        <member name="T:Simply.Data.DbCommandBuilder">
            <summary>
            Defines the <see cref="T:Simply.Data.DbCommandBuilder"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbCommandBuilder.CreateCommandWithOptions(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction,Simply.Data.Interfaces.IQuerySetting)">
            <summary>
            Create IDbCommand instance with database command and db transaction for given db connection.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="querySetting">Query setting object instance.</param>
            <returns>Returns A Database command instance. <see cref="T:System.Data.IDbCommand"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandBuilder.RebuildQueryWithParamaters(System.String,Simply.Data.Objects.DbCommandParameter[],System.String,System.Nullable{System.Char})">
            <summary>
            Rebuilds the query with paramaters.
            </summary>
            <param name="sqlText">The sql text.</param>
            <param name="parameters">The parameters.</param>
            <param name="parameterPrefix">The parameter prefix.</param>
            <param name="parameterNamePrefix">The parameter name prefix.</param>
            <returns>A string.</returns>
        </member>
        <member name="T:Simply.Data.AnyOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.AnyOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.AnyOperator.Any(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            The Any.
            </summary>
            <param name="connection">The connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="sqlText">The sqlText <see cref="T:System.String"/>.</param>
            <param name="obj">The obj <see cref="T:System.Object"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandSetting">Command setting</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Simply.Data.AnyOperator.Any(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            The Any.
            </summary>
            <param name="connection">The connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="simpleDbCommand">The simpleDbCommand <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Simply.Data.AnyOperator.Any(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            The Any.
            </summary>
            <param name="connection">The connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="odbcSqlQuery">The odbcSqlQuery <see cref="T:System.String"/>.</param>
            <param name="parameterValues">The parameterValues <see cref="!:object[]"/>.</param>
            <param name="transaction">The transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandSetting">Command setting</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:Simply.Data.ConnectionExtensions.CountOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.ConnectionExtensions.CountOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.ConnectionExtensions.CountOperator.Count(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            counts rows for given database command.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/></param>
            <param name="simpleDbCommand">database command<see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/></param>
            <returns>Returns row count as int value <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Simply.Data.ConnectionExtensions.CountOperator.CountLong(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            counts rows as long for given database command.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/></param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/></param>
            <returns>Returns row count as long value <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Simply.Data.ConnectionExtensions.CountOperator.Count(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows for given sql query and parameters.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="sql">Sql query <see cref="T:System.String"/>.</param>
            <param name="obj">object which has parameters as property <see cref="T:System.Object"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns row count as int value <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Simply.Data.ConnectionExtensions.CountOperator.CountLong(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows as long for given sql query and parameters.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="sql">Sql query <see cref="T:System.String"/>.</param>
            <param name="obj">object which has parameters as property <see cref="T:System.Object"/>.</param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/>.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns row count as long value <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Simply.Data.ConnectionExtensions.CountOperator.Count(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows for given odbc sql query and parameters.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query.Like SELECT * FROM TABLE_NAME WHERE COLUMN2 &gt; ? AND COLUMN3 = TRUNC(?)
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns row count as int value <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Simply.Data.ConnectionExtensions.CountOperator.CountLong(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows as long value for given odbc sql query and parameters.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query.Like SELECT * FROM TABLE_NAME WHERE COLUMN2 &gt; ? AND COLUMN3 = TRUNC(?)
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="transaction">Database transaction(optional).</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns count value as long.</returns>
        </member>
        <member name="T:Simply.Data.DbConnectionExtension">
            <summary>
            Defines the <see cref="T:Simply.Data.DbConnectionExtension"/>.
            </summary>
        </member>
        <member name="F:Simply.Data.DbConnectionExtension.dbCommandParameterTypePairs">
            <summary>
            The database comand pairs
            </summary>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.GetServerVersion(System.Data.IDbConnection)">
            <summary>
            Gets Server Version of database connection.
            </summary>
            <param name="connection">Database Connection.</param>
            <returns>The server version of db connection.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.GetConnectionStringBuilder(System.Data.IDbConnection)">
            <summary>
            Gets Connection String Builder of database connection.
            </summary>
            <param name="connection">Database Connection.</param>
            <returns>The connection string builder.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.CloseIfNot(System.Data.IDbConnection)">
            <summary>
            Closes DbConnection if not closed.
            </summary>
            <param name="connection">Database Connection.</param>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.CloseAndDispose(System.Data.IDbConnection)">
            <summary>
            Closes the and dispose.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.OpenIfNot(System.Data.IDbConnection)">
            <summary>
            Opens DbConnection if not opened.
            </summary>
            <param name="connection">Database Connection.</param>
            <exception cref="T:System.ArgumentNullException">if connection parameter is null, throws exception, else not.</exception>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.OpenAnd(System.Data.IDbConnection)">
            <summary>
            Opens the database connection if not opened and return this instance.
            </summary>
            <param name="connection">The database connection instance.</param>
            <returns>A IDbConnection instance.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.OpenAndBeginTransaction(System.Data.IDbConnection,System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Opens connection and Begins a DbTransaction.
            </summary>
            <param name="connection">Database Connection.</param>
            <param name="isolationLevel">(Optional) Transaction isolation level.</param>
            <returns>An IDbTransaction instance.</returns>
            <exception cref="T:System.ArgumentNullException">if connection parameter is null, throws exception, else not.</exception>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.GetQuerySetting(System.Data.IDbConnection)">
            <summary>
            Gets Query Setting.
            </summary>
            <param name="connection">Database connection.</param>
            <returns>.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.CreateAdapter(System.Data.IDbConnection)">
            <summary>
            Gets DbDataAdapter instance of database connection.
            </summary>
            <param name="connection">Database connection</param>
            <returns>Returns DbDataAdapter instance.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.CreateDbCommandParameter(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.DbType},System.Data.ParameterDirection)">
            <summary>
            Creates Db Parameter.
            </summary>
            <param name="connection">Database connection</param>
            <param name="parameterName">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="dbType">Parameter Db Type</param>
            <param name="direction">Parameter direction</param>
            <returns>Returns DbCommand instance.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.GetCommandParameterFromConnection(System.Data.IDbConnection)">
            <summary>
            Gets the command parameter from connection.
            </summary>
            <param name="connection">Database connection.</param>
            <returns>Returns Type of DbParameter class of this DbConnection class.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.BuildDbCommand(System.Data.IDbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Builds the database command.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Sql Query.</param>
            <param name="parameters">Command parameters.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">command Timeout (value as second)</param>
            <returns>Returns DbCommand instance.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.BuildDbCommand(System.Data.IDbConnection,System.String,System.Data.Common.DbParameter[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Builds the database command.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Sql Query.</param>
            <param name="parameters">Command parameters.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns DbCommand instance.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.IsOpen(System.Data.IDbConnection)">
            <summary>
            Checks DbConnection is open.
            </summary>
            <param name="connection">Database Connection.</param>
            <returns>Returns true if connection is open returns true, else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">if connection parameter is null, throws exception, else not.</exception>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.IsClosed(System.Data.IDbConnection)">
            <summary>
            Checks DbConnection is closed.
            </summary>
            <param name="connection">Database Connection.</param>
            <returns>Returns true if connection is closed returns true, else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">if connection parameter is null, throws exception, else not.</exception>
        </member>
        <member name="M:Simply.Data.DbConnectionExtension.CheckConnectionIsNull(System.Data.IDbConnection)">
            <summary>
            Checks DbConnection is null.
            </summary>
            <param name="connection">Database Connection.</param>
            <exception cref="T:System.ArgumentNullException">if connection parameter is null, throws exception, else not.</exception>
        </member>
        <member name="T:Simply.Data.DbRowListOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbRowListOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbRowListOperator.QueryMultiDbRowList(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            QueryMultiDbRowList Gets query multi result set as multi expando object list.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns list of SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbRowListOperator.GetDbRowListQuery(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetDbRowListQuery Gets query result set as SimpleDbRow object list.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbRowListOperator.GetMultiDbRowListQuery(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetMultiDbRowListQuery Gets query multi result set as multi SimpleDbRow list.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns multi SimpleDbRow list.</returns>
        </member>
        <member name="M:Simply.Data.DbRowListOperator.GetListAsDbRow(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            GetListAsDbRow Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="T:Simply.Data.ExecuteOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.ExecuteOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes query and returns result as int.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns exection result as int.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.ExecuteAsLong(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes query and returns result as long.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">The SQL text.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execution result as long.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.ExecuteAsDecimal(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes query and returns result as decimal.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">The SQL text.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execution result as decimal.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.ExecuteQuery(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Executes query and returns result as int.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/></param>
            <param name="simpleDbCommand">Db database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
            <param name="transaction">Database transaction <see cref="T:System.Data.IDbTransaction"/></param>
            <returns>Returns execution result as int. <see cref="!:IDbCommandResult&lt;System.Int32&gt;"/></returns>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.ExecuteAsOdbc(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes the specified ODBC SQL query.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.ExecuteAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the asynchronous operation.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) The transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields the execute.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.ExecuteAsLongAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the asynchronous operation result
            returns as long.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteOperator.ExecuteAsDecimalAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the asynchronous operation result
            returns as decimal.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields the execute.</returns>
        </member>
        <member name="T:Simply.Data.ExecuteReaderOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.ExecuteReaderOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.ExecuteReaderOperator.ExecuteReaderQuery(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,Simply.Data.Objects.DbCommandParameter[]@,System.Data.IDbTransaction,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Executes query with parameters and returns DataReader object.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="outputParameters"></param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandBehavior">Db Command Behavior.</param>
            <returns>Returns an IDataReader instance.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteReaderOperator.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32})">
            <summary>
            Executes query with parameters and returns DataReader object.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandType">(Optional) Command type.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandBehavior">CommandBehaviour for DataReader.</param>
            <param name="commandTimeout">db command timeout(optional).</param>
            <returns>Returns an IDataReader instance.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteReaderOperator.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Executes query with parameters and returns DataReader object.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandBehavior">CommandBehaviour for DataReader.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns an IDataReader instance.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteReaderOperator.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            An IDbConnection extension method that executes the reader asynchronous operation.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandBehavior">Db Command Behavior</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields the execute reader.</returns>
        </member>
        <member name="T:Simply.Data.ExecuteScalarOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.ExecuteScalarOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalarAs``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the scalar as operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">The SQL text.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execute scalar result as T instance.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.QueryExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalarQuery(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalarQueryAs``1(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalarOdbc(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified ODBC SQL query.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalarOdbcAs``1(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified ODBC SQL query.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalarAsAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            ExecuteScalar query with parameters and returns result object as async operation.
            </summary>
            <typeparam name="T">T struct.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.ExecuteScalarOperator.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the scalar asynchronous operation.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Sql query.</param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields the execute scalar.</returns>
        </member>
        <member name="T:Simply.Data.FirstOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.FirstOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.FirstOperator.QueryFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns first record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.FirstOperator.QueryFirst``1(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Get First Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns first record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.FirstOperator.GetFirst``1(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Odbc Sql Query Resultset as object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns first record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.FirstOperator.QueryFirstAsDbRowAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Resultset as dynamic object instance with async operation.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields the first as dynamic.</returns>
        </member>
        <member name="M:Simply.Data.FirstOperator.FirstAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.FirstOperator.QueryFirstAsDbRow(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Get First Row of the Resultset as dynamic object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns first record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.FirstOperator.QueryFirstAsDbRow(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Resultset as SimpleDbRow object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns first record as dynamic object.</returns>
        </member>
        <member name="T:Simply.Data.LastOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.LastOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.LastOperator.QueryLast``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.LastOperator.QueryLast``1(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Get Last Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.LastOperator.GetLast``1(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Odbc Sql query Resultset as object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.LastOperator.LastAsDynamicAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as dynamic object instance with async operation.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields the last as dynamic.</returns>
        </member>
        <member name="M:Simply.Data.LastOperator.LastAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.LastOperator.QueryLastAsDbRow(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Get Last Row of the Resultset as SimpleDbRow object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns last record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.LastOperator.QueryLastDbRow(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as SimpleDbRow object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns last record as SimpleDbRow instance.</returns>
        </member>
        <member name="T:Simply.Data.ListOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.ListOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.ListOperator.GetList``1(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Get List the specified ODBC SQL query with skip and take.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Db Command parameter values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <returns>Returns as object list.</returns>
        </member>
        <member name="M:Simply.Data.ListOperator.QueryListAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Gets Resultset of query as object instance list with async operation.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <returns>Returns as object list.</returns>
        </member>
        <member name="T:Simply.Data.PagedListOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.PagedListOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.PagedListOperator.QueryList``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Gets query resultset as object list with paging option.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object which has contains parameters as properties.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <returns>Returns as object list.</returns>
        </member>
        <member name="M:Simply.Data.PagedListOperator.GetList``1(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Gets query resultset as object list with paging option.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <returns>Returns as object list.</returns>
        </member>
        <member name="M:Simply.Data.PagedListOperator.SelectList``1(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Get List the specified ODBC SQL query with paging option.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="values">The parameters.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <param name="commandSetting">Command setting</param>
            <param name="transaction">Database transaction.</param>
            <returns>Returns as object list.</returns>
        </member>
        <member name="T:Simply.Data.PagedRowListOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.PagedRowListOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.PagedRowListOperator.QueryDbRowList(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            QueryDbRowList Gets query resultset as simpledbrow list with paging option.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.
            </param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.PagedRowListOperator.GetDbRowList(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            GetDbRowList Gets query resultset as SimpleDbRow object list with skip and take.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional. if it is null then paging will be disabled.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.PagedRowListOperator.SelectDbRowList(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Get List the specified ODBC SQL query.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="values">The parameters.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns as SimpleDbRow object list.</returns>
        </member>
        <member name="T:Simply.Data.ResultSetOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.ResultSetOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.ResultSetOperator.GetResultSetQuery(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Get Resultset of the Command definition.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns result set in a dataset instance.</returns>
        </member>
        <member name="M:Simply.Data.ResultSetOperator.GetOdbcResultSet(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Resultset of the specified ODBC SQL query.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns result set in a dataset instance.</returns>
        </member>
        <member name="M:Simply.Data.ResultSetOperator.GetResultSet(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            GetDynamicResultSetSkipAndTake Gets query resultset as dynamic object list with skip and take.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional. if it is null then paging will be disabled.</param>
            <returns>Returns dynamic object list.</returns>
        </member>
        <member name="T:Simply.Data.DbConnectionTypeBuilder">
            <summary>
            Defines the <see cref="T:Simply.Data.DbConnectionTypeBuilder"/>.
            </summary>
        </member>
        <member name="F:Simply.Data.DbConnectionTypeBuilder.connectionTypePairs">
            <summary>
            Defines the connectionTypePairs.
            </summary>
        </member>
        <member name="F:Simply.Data.DbConnectionTypeBuilder.OdbcConnectionTypes">
            <summary>
            Gets Odbc Connection Types.
            </summary>
        </member>
        <member name="F:Simply.Data.DbConnectionTypeBuilder.OledbConnectionTypes">
            <summary>
            Gets Oledb Connection Types.
            </summary>
        </member>
        <member name="F:Simply.Data.DbConnectionTypeBuilder.OracleConnectionTypes">
            <summary>
            Gets Oracle Connection Types.
            </summary>
        </member>
        <member name="F:Simply.Data.DbConnectionTypeBuilder.ScalarInsertConnectionTypes">
            <summary>
            Gets ConnectionTypes for Scalar Insert op.
            </summary>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.GetDbConnectionType(System.Data.IDbConnection)">
            <summary>
            Gets Connection Type.
            </summary>
            <param name="connection">Connection instance.</param>
            <returns>returns DbConnectionTypes enum.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.GetConnectionType(System.Data.IDbConnection)">
            <summary>
            The GetConnectionType.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <returns>The <see cref="T:Simply.Data.Enums.DbConnectionTypes"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.GetDbConnectionType``1(``0)">
            <summary>
            Gets Connection Type.
            </summary>
            <typeparam name="T">DbConnection class.</typeparam>
            <param name="connection">Connection instance.</param>
            <returns>returns DbConnectionTypes enum.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.IsInsertScalarMode(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Checks Connection Type is in Insert Scalar Mode.
            </summary>
            <param name="connectionType">Connection tType <see cref="T:Simply.Data.Enums.DbConnectionTypes"/>.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.IsOdbcConn(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Checks DbConnection is Odbc connection type.
            </summary>
            <param name="connectionType">
            The connectionType <see cref="T:Simply.Data.Enums.DbConnectionTypes"/> Db Connectype enum instance.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> if connnection type is one of these (Odbc, DB2Odbc, FirebirdOdbc,
            MySqlOdbc, OracleOdbc, PostgreSqlOdbc, SqlBaseOdbc, SqlOdbc, SynergyOdbc, NuoDb) returns
            true else returns false.
            </returns>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.IsOledbConn(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Checks DbConnection is Oledb connection type.
            </summary>
            <param name="connectionType">
            The connectionType <see cref="T:Simply.Data.Enums.DbConnectionTypes"/> Db Connectype enum instance.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> if connnection type is one of these (Oledb, DB2Oledb,
            FirebirdOledb, MySqlOledb, OracleOledb, PostgreSqlOledb, SqlBaseOledb, SqlOledb,
            SynergyOledb) returns true else returns false.
            </returns>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.IsOracleConnection(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Checks Connection type is Oracle.
            </summary>
            <param name="connectionType">
            The connectionType <see cref="T:Simply.Data.Enums.DbConnectionTypes"/> Db Connectype enum instance.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> if connnection type is one of these (Oracle, OracleOdbc,
            OracleOledb) returns true else returns false.
            </returns>
        </member>
        <member name="M:Simply.Data.DbConnectionTypeBuilder.GetFullTableName``1(Simply.Data.Enums.DbConnectionTypes,Simply.Common.Interfaces.ISimpleDefinitor{``0},System.Boolean)">
            <summary>
            Gets Table Name with Schema includes connection type prefix-suffix.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connectionType">
            The connectionType <see cref="T:Simply.Data.Enums.DbConnectionTypes"/> Db Connectype enum instance.
            </param>
            <param name="includeSchemaName">if true reuslt includes schema info else does not include.</param>
            <param name="simpleDefinitor">Simmple Definitor for table-class, column-property mapping.</param>
            <returns>Returns Table Name with Schema includes connection type prefix-suffix.</returns>
        </member>
        <member name="T:Simply.Data.DbQueryTranslator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbQueryTranslator"/>.
            </summary>
        </member>
        <member name="F:Simply.Data.DbQueryTranslator.empty">
            <summary>
            Defines the empty.
            </summary>
        </member>
        <member name="M:Simply.Data.DbQueryTranslator.TranslateOdbcQuery(System.Data.IDbConnection,System.String)">
            <summary>
            The Translate Odbc Query to parametrized query.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <returns>
            The <see cref="!:string[]"/> Returns translated query and parameters in same array. First
            element of array is translated query and other elements are query parameters. Query :
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = ?"
            For Sql Server Result;
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = @p0", "@p0"
            For Oracle Result;
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = :p0", ":p0"
            </returns>
        </member>
        <member name="M:Simply.Data.DbQueryTranslator.TranslateOdbcQuery(Simply.Data.Enums.DbConnectionTypes,System.String)">
            <summary>
            The Translate Odbc Query to parametrized query.
            </summary>
            <param name="connectionType">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <returns>
            The <see cref="!:string[]"/> Returns translated query and parameters in same array. First
            element of array is translated query and other elements are query parameters. Query :
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = ?"
            For Sql Server Result;
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = @p0", "@p0"
            For Oracle Result;
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = :p0", ":p0"
            </returns>
        </member>
        <member name="M:Simply.Data.DbQueryTranslator.BuildSimpleDbCommandForTranslate(System.Data.IDbConnection,System.String,Simply.Data.Objects.DbCommandParameter[],System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Builds SimpleDbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <param name="commandParameters">The commandParameters <see cref="!:DbCommandParameter[]"/>.</param>
            <param name="commandType">The db command type <see cref="T:System.Nullable`1"/>.</param>
            <param name="commandTimeout">DbCommand timeout</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as output else will be throw error.</param>
            <returns>Returns database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.DbQueryTranslator.BuildSimpleDbCommandForTranslate(System.Data.IDbConnection,System.String,Simply.Data.Objects.DbCommandParameter[],Simply.Data.Interfaces.ICommandSetting,System.Boolean)">
            <summary>
            Builds SimpleDbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <param name="commandParameters">The commandParameters <see cref="!:DbCommandParameter[]"/>.</param>
            <param name="commandSetting">Command setting</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as output else will be throw error.</param>
            <returns>Returns database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.DbQueryTranslator.RebuildSimpleDbCommandForTranslate(Simply.Data.Enums.DbConnectionTypes,Simply.Data.Objects.SimpleDbCommand,System.Boolean)">
             <summary>
            
             </summary>
             <param name="connectionType">db connacteion type.</param>
             <param name="tempSimpleDbCommand">odbc database command</param>
             <param name="setOverratedParamsToOutput">if it is true overrated parameters set as output else will be throw error.</param>
             <returns></returns>
        </member>
        <member name="M:Simply.Data.DbQueryTranslator.BuildDbCommandForTranslate(System.Data.IDbConnection,System.String,System.Object[],System.Data.CommandType,System.Boolean,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Builds DbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
            <param name="odbcSqlQuery">Sql query <see cref="T:System.String"/>.</param>
            <param name="parameterValues">Database command parameters <see cref="!:object[]"/>.</param>
            <param name="commandType">Command Type.</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as ouput parameters.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandTimeout">DbCommand timeout</param>
            <returns>Returns DbCommand object instance <see cref="T:System.Data.Common.DbCommand"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbQueryTranslator.TranslateParametersFromObject(System.Data.IDbConnection,System.Object)">
            <summary>
            Gets parameters from object.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="obj">object contains db parameters as property.</param>
            <returns>Returns DbCommandParameter instance array.</returns>
        </member>
        <member name="T:Simply.Data.SingleOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.SingleOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.SingleOperator.QuerySingle``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns single record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.SingleOperator.QuerySingle``1(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Get Single Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns single record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.SingleOperator.GetSingle``1(System.Data.IDbConnection,System.String,System.Object[],System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Odbc Sql Query Resultset as object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="transaction">Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns single record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.SingleOperator.QuerySingleDynamicAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as simple db row object instance with async operation.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>An asynchronous result that yields the single as dynamic.</returns>
        </member>
        <member name="M:Simply.Data.SingleOperator.SingleAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="commandSetting">Command setting</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.SingleOperator.QuerySingleAsDbRow(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as dynamic object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sqlText">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="obj">object contains db parameters as property.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <param name="commandSetting">Command setting</param>
            <returns>Returns single record as dynamic object.</returns>
        </member>
        <member name="M:Simply.Data.SingleOperator.QuerySingleAsDbRow(System.Data.IDbConnection,Simply.Data.Objects.SimpleDbCommand,System.Data.IDbTransaction)">
            <summary>
            Get Single Row of the Resultset as dynamic object instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <param name="transaction">(Optional) Database transaction.</param>
            <returns>Returns single record as dynamic object instance.</returns>
        </member>
        <member name="T:Simply.Data.Constants.DbConnectionNames">
            <summary>
            Defines the <see cref="T:Simply.Data.Constants.DbConnectionNames" />.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.OleDb">
            <summary>
            Defines the OleDb.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Odbc">
            <summary>
            Defines the Odbc.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.MySql">
            <summary>
            Defines the MySql.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.MySqlDevart">
            <summary>
            Defines the MySqlDevart.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.SQLite">
            <summary>
            Defines the SQLite.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Devart_SQLite">
            <summary>
            Defines the Devart_SQLite.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Firebird">
            <summary>
            Defines the Firebird.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Devart_Oracle">
            <summary>
            Defines the Devart_Oracle.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Oracle">
            <summary>
            Defines the Oracle.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.OracleManaged">
            <summary>
            Defines the OracleManaged.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Oracle_Win">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.PostgreSql">
            <summary>
            Defines the PostgreSql.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.PostgreSqlDevart">
            <summary>
            Defines the PostgreSqlDevart.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.VistaDB">
            <summary>
            Defines the VistaDB.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Sql">
            <summary>
            Defines the MsSql.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.SqlBaseGupta">
            <summary>
            Defines the SqlBaseGupta.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.SqlBaseUnify">
            <summary>
            Defines the SqlBaseUnify.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.SqlBase">
            <summary>
            Defines the SqlBase.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.SqlCe">
            <summary>
            Defines the SqlCe.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Sde">
            <summary>
            Defines the Sde.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.DB2">
            <summary>
            Defines the DB2.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.NuoDb">
            <summary>
            Defines the NuoDb.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.SQLDatabaseNet">
            <summary>
            Defines the SQLDatabaseNet.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Sybase">
            <summary>
            Defines the Sybase.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Ole_MySql">
            <summary>
            Defines the Ole_MySql.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Ole_DB2">
            <summary>
            Defines the Ole_DB2.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Ole_Ora">
            <summary>
            Defines the Ole_Ora.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Ole_Oracle">
            <summary>
            Defines the Ole_Oracle.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Ole_SQL">
            <summary>
            Defines the Ole_SQL.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbConnectionNames.Ole_Driver">
            <summary>
            Defines the Ole_Driver.
            </summary>
        </member>
        <member name="T:Simply.Data.Constants.InternalAppValues">
            <summary>
            Defines the <see cref="T:Simply.Data.Constants.InternalAppValues" />.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.NullValue">
            <summary>
            Defines the NullValue.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ErrorFileDateFormat">
            <summary>
            Time Format: yyyy-MM-dd-HH-mm-ss.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.GeneralDateFormat">
            <summary>
            Time Format: yyyy-MM-dd, HH:mm:ss ffffff.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ConnectionName">
            <summary>
            Defines the connectionName ==> "Connection";.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ServerVersion">
            <summary>
            Defines the serverVersion ==> "ServerVersion".
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.AtChar">
            <summary>
            Defines the atChar ==> '@'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.QuestionMark">
            <summary>
            Defines the questionChar ==> '?'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ColonChar">
            <summary>
            Defines the colonChar ==> ':'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ParameterChar">
            <summary>
            Defines the ParameterChar.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.OpeningSquareBracket">
            <summary>
            Defines the OpeningSquareBracket ==> '['.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ClosingSquareBracket">
            <summary>
            Defines the ClosingSquareBracket ==> ']'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.QuoteChar">
            <summary>
            Defines the QuoteChar ==> '"'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.Backquote">
            <summary>
            Defines the Backquote ==> '`'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.Empty">
            <summary>
            Defines the Emtpy string.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.CountFormat">
            <summary>
            Defines sql count format ==> SELECT COUNT(1) AS CNT FROM ( {0} )
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.SqlScriptFormat">
            <summary>
            Defines the CommandTextSqlScriptFormaty ==> "#SQL_SCRIPT#".
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.SkipFormat">
            <summary>
            Defines the CommandTextSqlScriptFormaty ==> "#SKIP#".
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.TakeFormat">
            <summary>
            Defines the CommandTextSqlScriptFormaty ==> "#TAKE#".
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ParameterQueryDelimiter">
            <summary>
            char '|'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.ParameterPropertyDelimiter">
            <summary>
            char ';'.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.OracleCommandBindByNameProperty">
            <summary>
            "BindByName".
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.OracleStringConcatOperator">
            <summary>
            Oracle String Concat Operator ==> " || "
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.MsSqlStringConcatOperator">
            <summary>
            Ms Sql String Concat Operator ==> " + "
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.OneSpace">
            <summary>
            Defines " " string.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.SpaceChar">
            <summary>
            Defines ' ' char.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.InternalAppValues.BackquoteString">
            <summary>
            Defines the Backquote as String ==> '`'.
            </summary>
        </member>
        <member name="T:Simply.Data.Constants.DbAppMessages">
            <summary>
            Defines the <see cref="T:Simply.Data.Constants.DbAppMessages" />.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbAppMessages.UndefinedDbConnectionType">
            <summary>
            Defines the UndefinedDbConnectionType.
            </summary>
        </member>
        <member name="F:Simply.Data.Constants.DbAppMessages.UndefinedKey">
            <summary>
            Defines the UndefinedKey.
            </summary>
        </member>
        <member name="T:Simply.Data.DbAnyOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbAnyOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbAnyOperator.Any(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            The Any.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql Query<see cref="T:System.String"/>.</param>
            <param name="parameterObject">parameter Value object <see cref="T:System.Object"/>.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbAnyOperator.Any(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            The Any.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">The simpleDbCommand <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbAnyOperator.AnyOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            The Any.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The odbcSqlQuery <see cref="T:System.String"/>.</param>
            <param name="parameterValues">The parameterValues <see cref="!:object[]"/>.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbAnyOperator.AnyJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            The Any for jdbc sql query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">Jdbc Sql query <see cref="T:System.String"/>
            like #SELECT T1.* FROM TABLE T1 WHERE T1.INT_COLUMN = ?1 AND T2.DATE_COLUMN = ?2 #.</param>
            <param name="parameterValues">The parameterValues <see cref="!:object[]"/>.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:Simply.Data.DbCountOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbCountOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbCountOperator.Count(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            counts rows for given database command.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command<see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
            <returns>Returns row count as int value <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCountOperator.CountLong(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            counts rows as long for given database command.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
            <returns>Returns row count as long value <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCountOperator.Count(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows for given sql query and parameters.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query <see cref="T:System.String"/>.</param>
            <param name="parameterObject">object which has parameters as property <see cref="T:System.Object"/>.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns row count as int value <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCountOperator.CountLong(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows as long for given sql query and parameters.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query <see cref="T:System.String"/>.</param>
            <param name="parameterObject">object which has parameters as property <see cref="T:System.Object"/>.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns row count as long value <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCountOperator.CountOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows for given odbc sql query and parameters.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query.Like SELECT * FROM TABLE_NAME WHERE COLUMN2 &gt; ? AND COLUMN3 = TRUNC(?)
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns row count as int value <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCountOperator.CountLongOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows as long value for given odbc sql query and parameters.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query.Like SELECT * FROM TABLE_NAME WHERE COLUMN2 &gt; ? AND COLUMN3 = TRUNC(?)
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns count value as long.</returns>
        </member>
        <member name="M:Simply.Data.DbCountOperator.CountJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows for given jdbc sql query and parameters.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">
            The JDBC SQL query.Like SELECT * FROM TABLE_NAME WHERE COLUMN2 &gt; ?1 AND COLUMN3 = TRUNC(?2)
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns row count as int value <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCountOperator.CountLongJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            counts rows as long value for given jdbc sql query and parameters.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">
            The JDBC SQL query.Like SELECT * FROM TABLE_NAME WHERE COLUMN2 &gt; ?1 AND COLUMN3 = TRUNC(?2)
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns count value as long.</returns>
        </member>
        <member name="T:Simply.Data.DbExecuteOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbExecuteOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.Execute(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes query and returns result as int.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns exection result as int.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.Execute(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Executes db command and returns result as int.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">Db database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteAsync(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the asynchronous operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields the execute.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteAsync(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            An IDbConnection extension method that executes the asynchronous operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">Db database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
            <returns>An asynchronous result that yields the execute.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteOdbcAsync(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the asynchronous operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields the execute.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteResult(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes query and returns result as int.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns exection result as int.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteResult(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Executes query and returns result as int.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">Db database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteResultOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.Execute(Simply.Data.Interfaces.ISimpleDatabase,System.Collections.Generic.List{Simply.Data.Objects.SimpleDbCommand})">
            <summary>
            Executes db command list and returns result as int.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="dbCommands">Db database command list. <see cref="T:Simply.Data.Objects.SimpleDbCommand"/></param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes the specified JDBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteOperator.ExecuteResultJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Executes the specified JDBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execution result as int.</returns>
        </member>
        <member name="T:Simply.Data.DbExecuteScalarOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbExecuteScalarOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalar(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarAs``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalar(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarAs``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the scalar as operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">The SQL text.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as T instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarOdbcAs``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarAsAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            ExecuteScalar query with parameters and returns result object as async operation.
            </summary>
            <typeparam name="T">T struct.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarAsync``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            An IDbConnection extension method that executes the scalar asynchronous operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>An asynchronous result that yields the execute scalar.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarOdbcAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResult(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResultAs``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResult(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            ExecuteScalar query with parameters and returns result object.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResultAs``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            An IDbConnection extension method that executes the scalar as operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">The SQL text.</param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as T instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResultOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResultOdbcAs``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalar(Simply.Data.Interfaces.ISimpleDatabase,System.Collections.Generic.List{Simply.Data.Objects.SimpleDbCommand})">
            <summary>
            Executes db command list and returns result as object array.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="dbCommands">Db database command list. <see cref="T:Simply.Data.Objects.SimpleDbCommand" /></param>
            <returns>Returns object array.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified JDBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarJdbcAs``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified JDBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResultJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified JDBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object.</returns>
        </member>
        <member name="M:Simply.Data.DbExecuteScalarOperator.ExecuteScalarResultJdbcAs``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Execute Scalar the specified JDBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns execute scalar result as object instance.</returns>
        </member>
        <member name="T:Simply.Data.DbFirstOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbFirstOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.First``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get First Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns first record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.First``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns first record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstOdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Odbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns first record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstJdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Jdbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns first record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstAsync``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get First Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns first record as T object instance as async.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstOdbcAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Odbc Sql Query Resultset as object instance with async operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields the first as T.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstJdbcAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Jdbc Sql Query Resultset as object instance with async operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields the first as T.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstRow(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get First Row of the Resultset as simple db row instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <returns>Returns first record as simple db row instance.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstRow(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Resultset as SimpleDbRow object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns first record as dynamic object.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstRowOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Odbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns first record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbFirstOperator.FirstRowJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get First Row of the Jdbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns first record as object instance.</returns>
        </member>
        <member name="T:Simply.Data.DbLastOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbLastOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbLastOperator.Last``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Last Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.Last``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastOdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Odbc Sql query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastJdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Jdbc Sql query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">
            The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastAsync``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Last Row of the Resultset as dynamic object instance with async operation.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>An asynchronous result that yields the last record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastOdbcAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).
            </param>
            <param name="parameterValues">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastJdbcAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">
            The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).
            </param>
            <param name="parameterValues">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastRowResult(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Last Row of the Resultset as SimpleDbRow object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns last record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastRow(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Last Row of the Resultset as SimpleDbRow object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns last record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastRow(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Resultset as SimpleDbRow object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns last record as SimpleDbRow instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastRowOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Odbc Sql query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">
            The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns last record as SimpleDbRow instance.</returns>
        </member>
        <member name="M:Simply.Data.DbLastOperator.LastRowJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Last Row of the Jdbc Sql query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">
            The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).
            </param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns last record as SimpleDbRow instance.</returns>
        </member>
        <member name="T:Simply.Data.DbListOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbListOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbListOperator.List``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetDbRowListQuery Gets query result set as object instance list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbListOperator.List``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets query result set as object instance list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns list of SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbListOperator.ListOdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbListOperator.ListJdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbListOperator.ListResult``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetDbRowListQuery Gets query result set as object instance list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbListOperator.ListResult``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets query multi result set as multi simpledbrow list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns list of SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbListOperator.ListOdbcResult``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbListOperator.ListJdbcResult``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets jdbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="T:Simply.Data.DbPagedListOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbPagedListOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbPagedListOperator.GetListAsync``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetDbRowListQuery Gets query result set as object instance list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DbPagedListOperator.QueryListAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.IPageInfo,Simply.Data.Interfaces.ICommandSetting,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets Resultset of query as object instance list with async operation.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="pageInfo">page info for skip and take counts.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns as object list async.</returns>
        </member>
        <member name="M:Simply.Data.DbPagedListOperator.GetListAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="T:Simply.Data.DbResultSetOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbResultSetOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbResultSetOperator.GetDataSet(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Resultset of the specified SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">The SQL query.</param>
            <param name="parameterObject">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns result set in a dataset instance.</returns>
        </member>
        <member name="M:Simply.Data.DbResultSetOperator.GetDataSetOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Resultset of the specified ODBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns result set in a dataset instance.</returns>
        </member>
        <member name="M:Simply.Data.DbResultSetOperator.GetDataSetJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Resultset of the specified JDBC SQL query.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameters.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns result set in a dataset instance.</returns>
        </member>
        <member name="M:Simply.Data.DbResultSetOperator.GetResultSetQuery(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Resultset of the Command definition.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns result set in a dataset instance.</returns>
        </member>
        <member name="M:Simply.Data.DbResultSetOperator.GetDataSetResult(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            GetDynamicResultSetSkipAndTake Gets query resultset as dynamic object list with skip and take.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional. if it is null then paging will be disabled.</param>
            <returns>Returns dynamic object list.</returns>
        </member>
        <member name="T:Simply.Data.DbSingleOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DbSingleOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.Single``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Single Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <returns>Returns single record as dynamic object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.Single``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as object instance.
            </summary>
            <typeparam name="T">T class.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns single record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleOdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Odbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns single record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleJdbc``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Jdbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns single record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleRow(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Single Row of the Resultset as simple db row instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <returns>Returns single record as simple db row instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleRow(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as dynamic object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns single record as dynamic object.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleOdbcRow(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Odbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns single record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleJdbcRow(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Jdbc Sql Query Resultset as object instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns single record as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleAsync``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Single Row of the Resultset as simple db row object instance with async operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <returns>An asynchronous result that yields the single as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as object instance with async operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            Select * From TableName Where Column1 = ?p1?
            parameterNamePrefix : ?
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>An asynchronous result that yields a T.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleOdbcAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as simple db row object instance with async operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ? ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>s
            <returns>An asynchronous result that yields the single as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleJdbcAsync``1(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Get Single Row of the Resultset as simple db row object instance with async operation.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query ( Example: SELECT * FROM TABLE_NAME WHERE ID_COLUMN = ?1 ).</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>s
            <returns>An asynchronous result that yields the single as object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbSingleOperator.SingleRowResult(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Get Single Row of the Resultset as simple db row instance.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <returns>Returns single record as simple db row instance.</returns>
        </member>
        <member name="T:Simply.Data.DatabaseExtensions.SimpleDatabaseExtension">
            <summary>
            Defines the <see cref="T:Simply.Data.DatabaseExtensions.SimpleDatabaseExtension"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DatabaseExtensions.SimpleDatabaseExtension.GetDbConnection``1(``0)">
            <summary>
            Gets the db connection.
            </summary>
            <param name="database">The simple database object instance.</param>
            <returns>A IDbConnection.</returns>
        </member>
        <member name="M:Simply.Data.DatabaseExtensions.SimpleDatabaseExtension.GetDbTransaction``1(``0)">
            <summary>
            Gets the db transaction.
            </summary>
            <param name="database">The simple database object instance.</param>
            <returns>A IDbTransaction.</returns>
        </member>
        <member name="T:Simply.Data.SimpleDbRowListOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.SimpleDbRowListOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.ListRow(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetDbRowListQuery Gets query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.ListRow(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets query multi result set as multi simpledbrow list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns list of SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.ListRowOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.ListRowJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets jdbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.ListRowResult(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetDbRowListQuery Gets query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRow(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets query multi result set as multi SimpleDbRow list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns multi SimpleDbRow list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRow(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets query multi result set as multi simpledbrow list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns list of SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRowOdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRowJdbc(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets jdbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRowResult(Simply.Data.Interfaces.ISimpleDatabase,Simply.Data.Objects.SimpleDbCommand,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            GetMultiDbRowListQuery Gets query multi result set as multi SimpleDbRow list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="simpleDbCommand">database command.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns multi SimpleDbRow list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRowResult(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object,Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets query multi result set as multi simpledbrow list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="sqlQuery">Sql query.
            if parameterNamePrefix is ? and Query: Select * From TableName Where Column1 = ?p1?
            Then;
            Query For Oracle ==> Select * From TableName Where Column1 = :p1
            Query For Sql Server ==> Select * From TableName Where Column1 = @p1
            if parameterNamePrefix is null and Query: Select * From TableName Where Column1 = :p1 (for PostgreSql)
            no conversion occured.
            parameterNamePrefix will be set in ICommandSetting instance.
            </param>
            <param name="parameterObject">object contains db parameters as property.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns list of SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRowOdbcResult(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets odbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="odbcSqlQuery">The ODBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowListOperator.MultiListRowJdbcResult(Simply.Data.Interfaces.ISimpleDatabase,System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,Simply.Data.Interfaces.IPageInfo,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Gets jdbc sql query result set as SimpleDbRow object list.
            </summary>
            <param name="database">The simple database object instance.</param>
            <param name="jdbcSqlQuery">The JDBC SQL query.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="pageInfo">page info for skip and take counts. it is optional.
            if it is null then paging will be disabled.</param>
            <param name="behavior">The behavior <see cref="T:System.Nullable`1"/>.</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="T:Simply.Data.Database.SimpleDatabase">
            <summary>
            Simple Database object for database operations.
            </summary>
            <seealso cref="T:Simply.Data.Interfaces.ISimpleDatabase" />
        </member>
        <member name="F:Simply.Data.Database.SimpleDatabase.empty">
            <summary>
            Defines the empty.
            </summary>
        </member>
        <member name="F:Simply.Data.Database.SimpleDatabase.disposed">
            <summary>
            The disposed for disposing.
            </summary>
        </member>
        <member name="F:Simply.Data.Database.SimpleDatabase.transactionState">
            <summary>
            The transaction state.
            0; transaction state empty.
            1; transaction can be committed/rollbacked.
            2; transaction has been committed/rollbacked.
            </summary>
        </member>
        <member name="F:Simply.Data.Database.SimpleDatabase.connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:Simply.Data.Database.SimpleDatabase.transaction">
            <summary>
            The transaction
            </summary>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Database.SimpleDatabase"/> class.
            </summary>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction,Simply.Data.Interfaces.IQuerySetting,Simply.Common.Interfaces.ISimpleDefinitorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Database.SimpleDatabase"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="querySetting">Query Setting instance.</param>
            <param name="definitorFactory">definitor factory instance for create definitor.</param>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.#ctor(System.Data.Common.DbProviderFactory,System.String,Simply.Data.Interfaces.IQuerySetting,Simply.Common.Interfaces.ISimpleDefinitorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Database.SimpleDatabase"/> class.
            </summary>
            <param name="providerFactory">The provider factory.</param>
            <param name="connectionString">The connection string.</param>
            <param name="querySetting">Query Setting instance.</param>
            <param name="definitorFactory">definitor factory instance for create definitor.</param>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
            <value>
            The query setting.
            </value>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.ConnectionType">
            <summary>
            Gets the type of the database connection.
            </summary>
            <value>
            The type of the database connection.
            </value>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.CommandLogAction">
            <summary>
            Gets the action for command logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.DbCommandLogAction">
            <summary>
            Gets the action for command logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.InternalExceptionHandler">
            <summary>
            Gets or sets the internal exception handler.
            </summary>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.LogCommand">
            <summary>
            Gets, sets value for SimpleDbCommand logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.LogDbCommand">
            <summary>
            Gets, sets value for IDbCommand logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.AutoClose">
            <summary>
            Gets or sets connection auto close.
            </summary>
        </member>
        <member name="P:Simply.Data.Database.SimpleDatabase.DefinitorFactory">
            <summary>
            Gets the definitor factory.
            </summary>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Dispose">
            <summary>
            disposes both managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Finalize">
            <summary>
            the finalizer
            </summary>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Begin(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Commit(System.Boolean)">
            <summary>
            Commits the transaction.
            </summary>
            <param name="closeConnectionAtFinal">If true, close connection at final.</param>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Rollback(System.Boolean)">
            <summary>
            Rollbacks the transaction.
            </summary>
            <param name="closeConnectionAtFinal">If true, close connection at final.</param>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Close">
            <summary>
            Closes the database connection if there is no alive transaction.
            </summary>
            <exception cref="T:System.Exception">if there is alive transaction.</exception>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.TranslateParametersFromObject(System.Object)">
            <summary>
            Translates the parameters from object.
            </summary>
            <param name="obj">object that contains parameters as property.</param>
            <returns></returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.TranslateOdbcQuery(System.String)">
            <summary>
            The Translate Odbc Query to parametrized query.
            </summary>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <returns>
            The <see cref="!:string[]"/> Returns translated query and parameters in same array. First
            element of array is translated query and other elements are query parameters. Query :
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = ?"
            For Sql Server Result;
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = @p0", "@p0"
            For Oracle Result;
            "SELECT T1.* FROM TABLE1 T1 WHERE T1.ID_COLUMN = :p0", ":p0"
            </returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.BuildSimpleDbCommandForTranslate(System.String,Simply.Data.Objects.DbCommandParameter[],Simply.Data.Interfaces.ICommandSetting,System.Boolean)">
            <summary>
            Builds SimpleDbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <param name="commandParameters">The commandParameters <see cref="!:DbCommandParameter[]"/>.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as output else will be throw error.</param>
            <returns>Returns database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.BuildSimpleDbCommandForOdbcQuery(System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,System.Boolean)">
            <summary>
            Builds SimpleDbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as output else will be throw error.</param>
            <returns>Returns simple database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.BuildSimpleDbCommandForQuery(System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Builds the simple database command for SQL query.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns simple database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.CreateCommand(Simply.Data.Objects.SimpleDbCommand,System.Boolean)">
            <summary>
            Create IDbCommand instance with database command.
            </summary>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <param name="connectionShouldBeOpened">if it is true database connection will be opened, else not.</param>
            <returns>Returns DbCommand object instance <see cref="T:System.Data.IDbCommand"/>.</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.CreateDataAdapter">
            <summary>
            Gets DbDataAdapter instance of database connection.
            </summary>
            <returns>Returns DbDataAdapter instance.</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.ApplyPageInfo(Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Applies the paging info into simple db command.
            </summary>
            <param name="dbCommand">The database command.</param>
            <param name="pageInfo">The page information.</param>
            <returns>Applies paging and return simpledbcommand instance.</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.CommandLog(Simply.Data.Objects.SimpleDbCommand)">
            <summary>
            Logs the command.
            </summary>
            <param name="simpleDbCommand">The simple db command.</param>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.DbCommandLog(System.Data.IDbCommand)">
            <summary>
            Logs the database command.
            </summary>
            <param name="dbCommand">The database command.</param>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.BuildSimpleDbCommandForJdbcQuery(System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,System.Boolean)">
            <summary>
            Builds SimpleDbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="jdbcSqlQuery">Jdbc Sql query <see cref="T:System.String"/>
            like #SELECT T1.* FROM TABLE T1 WHERE T1.INT_COLUMN = ?1 AND T2.DATE_COLUMN = ?2 #.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as output else will be throw error.</param>
            <returns>Returns simple database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.Create``1(System.String)">
            <summary>
            Creates Db connection.
            </summary>
            <typeparam name="TDbConnection"></typeparam>
            <param name="connectionString">database connection string</param>
            <returns>TDbConnection object instance</returns>
        </member>
        <member name="M:Simply.Data.Database.SimpleDatabase.CreateDb``1(System.Boolean,System.Boolean,System.Boolean,System.Action{Simply.Data.Objects.SimpleDbCommand},System.Action{System.Data.IDbCommand},System.Action{System.Exception})">
            <summary>
            Creates the simple database instance.
            </summary>
            <param name="logCommand">If true, log command.</param>
            <param name="logDbCommand">If true, log db command.</param>
            <param name="autoClose">If true, auto close.</param>
            <param name="commandLogAction">The command log action.</param>
            <param name="dbCommandLogAction">The db command log action.</param>
            <param name="internalExceptionHandler">The internal exception handler.</param>
            <returns>A TSimpleDatabase instance.</returns>
        </member>
        <member name="T:Simply.Data.DataExtensions">
            <summary>
            Defines the <see cref="T:Simply.Data.DataExtensions" />.
            </summary>
        </member>
        <member name="M:Simply.Data.DataExtensions.ToList``1(System.Data.DataTable,System.Boolean)">
            <summary>
            convert datatable To List.
            </summary>
            <typeparam name="T">T object type.</typeparam>
            <param name="datatable">Datatable object.</param>
            <param name="accordingToColumn">The accordingToColumn<see cref="T:System.Boolean"/>.</param>
            <returns>Returns A List of T object.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.ToList_V2``1(Simply.Data.Interfaces.ISimpleDatabase,System.Data.DataTable,System.Boolean)">
            <summary>
            convert datatable To List.
            </summary>
            <typeparam name="T">T object type.</typeparam>
            <param name="database">simple database object</param>
            <param name="datatable">Datatable object.</param>
            <param name="unForceNullValueBind"></param>
            <returns>   Returns A List of T object.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.Row2Instance``1(System.Data.DataRow,System.Reflection.PropertyInfo[],System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="row"></param>
             <param name="rowProperties"></param>
             <param name="column2PropertyMap"></param>
             <param name="unForceNullValueBind"></param>
             <returns></returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.CopyColumnsAsDatatable(System.Data.DataTable)">
            <summary>
            Copies datatable to a new datatable.
            </summary>
            <param name="datatable">DataTable object.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.GetPageOfDataTable(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Gets Page Of DataTable.
            </summary>
            <param name="datatable">DataTable object.</param>
            <param name="pageNumber">The page number.</param>
            <param name="rowCount">Number of rows.</param>
            <returns>The page of data table.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.GetColumnsOfDataTable(System.Data.DataTable,System.String[])">
            <summary>
            Gets Columns Of DataTable.
            </summary>
            <param name="datatable">DataTable object.</param>
            <param name="columnList">column names array.</param>
            <returns>Returns a DataTable with Selected column names.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.GetColumnsOfDataTable(System.Data.DataTable,System.Int32[])">
            <summary>
            Gets Columns Of DataTable.
            </summary>
            <param name="datatable">DataTable object.</param>
            <param name="columnList">column numbers array.</param>
            <returns>Returns a DataTable with Selected column numbers.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.GetObjectWithSelectedColumn(System.Data.DataTable,System.String,System.Object,System.String)">
            <summary>
            Gets Object With Selected Column.
            </summary>
            <param name="datatable">DataTable object.</param>
            <param name="refColumn">Name of Reference Column.</param>
            <param name="refValue">Value of Reference Column.</param>
            <param name="destinationColumn">Name of Destination Column.</param>
            <returns>The <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.ExportAsExcelWithIncludeColumns(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            A DataTable extension method that export as excel with include columns.
            </summary>
            <param name="datatable">DataTable object.</param>
            <param name="fileName">Filename of the file.</param>
            <param name="includeColumns">A variable-length parameters list containing include columns.</param>
        </member>
        <member name="M:Simply.Data.DataExtensions.ExportAsExcelWithExcludeColumns(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            A DataTable extension method that export as excel with exclude columns.
            </summary>
            <param name="datatable">               DataTable object.</param>
            <param name="fileName">         Filename of the file.</param>
            <param name="excludeColumns">   A variable-length parameters list containing exclude columns.</param>
        </member>
        <member name="M:Simply.Data.DataExtensions.CopyDatatable(System.Data.DataTable,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Copies datatable to a new datatable.
            </summary>
            <param name="datatable">   DataTable object.</param>
            <param name="pageInfo"></param>
            <returns>   A DataTable.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.GetSomeColumnsAsTable(System.Data.DataTable,System.String[])">
            <summary>
            Get Some Columns As DataTable.
            </summary>
            <param name="datatable">DataTable object.</param>
            <param name="columnList">column names array.</param>
            <returns>some columns as table.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.RowToObject``1(System.Data.DataRow,System.Data.DataColumnCollection)">
            <summary>
            convert datarow to T object instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="row">The row to act on.</param>
            <param name="columns">(Optional) The columns.</param>
            <returns>A T instance.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.GetColumnAsUniqueList``1(System.Data.DataTable,System.String)">
            <summary>
            Gets Column As Unique List.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="dataTable">The dataTable to act on.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The column as unique list.</returns>
        </member>
        <member name="M:Simply.Data.DataExtensions.ToDynamicList(System.Data.DataTable)">
            <summary>
            convert datatable to expandoobject list.
            </summary>
            <param name="table">The table to act on.</param>
            <returns>Table as a List{dynamic}.</returns>
        </member>
        <member name="T:Simply.Data.SimpleDbRowExtensions">
            <summary>
            Defines the <see cref="T:Simply.Data.SimpleDbRowExtensions"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.SimpleDbRowExtensions.ConvertRowsToList``1(Simply.Data.Interfaces.ISimpleDatabase,System.Collections.Generic.List{Simply.Common.Objects.SimpleDbRow})">
            <summary>
            Converts the rows to list.
            </summary>
            <param name="database">simple database object</param>
            <param name="rows">The rows.</param>
            <returns>A list of TS.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowExtensions.ConvertRowsToList``1(Simply.Data.Interfaces.ISimpleDatabase,System.Collections.Generic.List{Simply.Common.Objects.SimpleDbRow},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            A List&lt;SimpleDbRow&gt; extension method that converts a dynList to a list.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">simple database object </param>
            <param name="rows">The dynList to act on.</param>
            <param name="columnPropertyMap">Column-Property Map</param>
            <returns>The given data converted to a list.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowExtensions.SetPropertyValuesFromRow``1(``0@,System.Reflection.PropertyInfo[],Simply.Common.Objects.SimpleDbRow,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the property values.
            </summary>
            <param name="instance">The instance.</param>
            <param name="properties">The properties.</param>
            <param name="row">The row.</param>
            <param name="columnPropertyMappings">The column property mappings.</param>
        </member>
        <member name="M:Simply.Data.SimpleDbRowExtensions.ConvertRowTo``1(Simply.Data.Interfaces.ISimpleDatabase,Simply.Common.Objects.SimpleDbRow)">
            <summary>
            Convert dynamic object to new T object instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="database">simple database object </param>
            <param name="row">The dyn to act on.</param>
            <returns>to converted.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowExtensions.ConvertRowsToList``1(System.Collections.Generic.List{Simply.Common.Objects.SimpleDbRow})">
            <summary>
            Converts the rows to list.
            </summary>
            <param name="rows">The rows.</param>
            <returns>A list of TS.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowExtensions.ConvertRowTo``1(Simply.Common.Objects.SimpleDbRow)">
            <summary>
            Convert dynamic object to new T object instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="row">The dyn to act on.</param>
            <returns>to converted.</returns>
        </member>
        <member name="M:Simply.Data.SimpleDbRowExtensions.ConvertRowTo``1(Simply.Common.Objects.SimpleDbRow,System.Func{Simply.Common.Objects.SimpleDbRow,``0})">
            <summary>
            Converts the row to T object instance.
            </summary>
            <param name="row">The row.</param>
            <param name="convertFunction">The convert function.</param>
            <returns>A T instance.</returns>
        </member>
        <member name="T:Simply.Data.DataReaderAsyncOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DataReaderAsyncOperator" />.
            </summary>
        </member>
        <member name="M:Simply.Data.DataReaderAsyncOperator.FirstDbRowAsync(System.Data.IDataReader)">
            <summary>
            Gets First Row Async.
            </summary>
            <param name="reader">The dataReader to act on.</param>
            <returns>An asynchronous result that yields the first row.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderAsyncOperator.LastDbRowAsync(System.Data.IDataReader)">
            <summary>
            Gets Last Row Async.
            </summary>
            <param name="reader">The dataReader to act on.</param>
            <returns>An asynchronous result that yields the last row.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderAsyncOperator.GetDbRowListAsync(System.Data.IDataReader,System.Boolean)">
            <summary> GetDynamicResultSetAsync
            Gets Dynamic ResultSet Async.
            </summary>
            <param name="reader"></param>
            <param name="closeAtFinal">(Optional) .</param>
            <returns>Returns SimpleDbRow object list.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderAsyncOperator.GetMultiDbRowListAsync(System.Data.IDataReader)">
            <summary> GetMultiDynamicResultSetAsync
            An IDataReader extension method that gets multi SimpleDbRow result set asynchronous.
            </summary>
            <param name="reader">IDataReader object.</param>
            <returns>An asynchronous result that yields the multi SimpleDbRow result set.</returns>
        </member>
        <member name="T:Simply.Data.DataReaderOperator">
            <summary>
            Defines the <see cref="T:Simply.Data.DataReaderOperator"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.CloseIfNot(System.Data.IDataReader)">
            <summary>
            Closes IDataReader object if it is not closed.
            </summary>
            <param name="reader">The dataReader to act on.</param>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.Any(System.Data.IDataReader,System.Boolean)">
            <summary>
            Checks Data Reader has any rows.
            </summary>
            <param name="reader"></param>
            <param name="closeAtFinal"></param>
            <returns>Returns true Datat reader has rows, else returns false.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.GetDataReaderMetadata(System.Data.IDataReader)">
            <summary>
            Returns DataReader metadata as dictionary.
            </summary>
            <param name="dataReader">Datareader instance.</param>
            <returns>Returns Dictionary{string, Type} object instance. </returns>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.GetSimpleRowListSkipAndTake(System.Data.IDataReader,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Gets simple db row List with skip and take options.
            </summary>
            <param name="reader">Data reader object instance.</param>
            <param name="skip">Count for Skip.</param>
            <param name="take">Count for Take.</param>
            <param name="closeAtFinal">if true datareader will be closed at final else not.</param>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.GetResultSetAsDbRow(System.Data.IDataReader,System.Boolean)">
            <summary>
            Gets Result Set as simple row list.
            </summary>
            <param name="reader">.</param>
            <param name="closeAtFinal">(Optional) .</param>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.GetSimpleDbRow(System.Data.IDataReader)">
            <summary>
            Gets the simple db row.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>A SimpleDbRow.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.GetMultiDbRowList(System.Data.IDataReader,System.Boolean)">
            <summary>
            Gets the multi db row list.
            </summary>
            <param name="reader">The reader.</param>
            <param name="closeAtFinal">If true, close at final.</param>
            <returns>A list of List.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.FirstDbRow(System.Data.IDataReader,System.Boolean)">
            <summary>
            Returns First Row as dynamic object.
            </summary>
            <param name="reader">The dataReader to act on.</param>
            <param name="closeAtFinal">(Optional) .</param>
            <returns>An simple db row instance.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.LastDbRow(System.Data.IDataReader,System.Boolean)">
            <summary>
            Returns Last Row as dynamic object.
            </summary>
            <param name="reader">The dataReader to act on.</param>
            <param name="closeAtFinal">(Optional) .</param>
            <returns>An simple db row instance.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.SingleDbRow(System.Data.IDataReader)">
            <summary>
            Returns Single Row as dynamic object.
            </summary>
            <param name="reader">The dataReader to act on.</param>
            <returns>An simple db row instance.</returns>
        </member>
        <member name="M:Simply.Data.DataReaderOperator.GetDataReaderMetadataRow(System.Data.IDataReader)">
            <summary>
            Returns DataReader metadata as SimpleDbRow.
            </summary>
            <param name="dataReader">Datareader instance.</param>
            <returns>Returns SimpleDbRow object instance. </returns>
        </member>
        <member name="T:Simply.Data.DbCommandExtensions.CommandExtensions">
            <summary>
            Defines the <see cref="T:Simply.Data.DbCommandExtensions.CommandExtensions"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetCommandTransaction(System.Data.IDbCommand,System.Data.IDbTransaction)">
            <summary>
            The Sets Transaction of IDbCommand instance.
            </summary>
            <param name="command">IDbCommand instance <see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="transaction">IDbTransaction instance <see cref="T:System.Data.IDbTransaction"/>.</param>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetParameterValue(System.Data.IDbCommand,System.Int32,System.Object)">
            <summary>
            The Sets Value of Parameter with given parmeter index and value.
            </summary>
            <param name="command">IDbCommand instance<see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="parameterIndex">Index of parameter <see cref="T:System.Int32"/>.</param>
            <param name="parameterValue">Value of parameter <see cref="T:System.Object"/>.</param>
            <exception cref="T:System.NullReferenceException">throws IDbCommand instance is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">throws parameter index less than zero or greater than parameter length.</exception>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetParameterValue(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Set Value Parameter with given name and value.
            </summary>
            <param name="command">The command <see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="parameterName">The parameterName <see cref="T:System.String"/>.</param>
            <param name="parameterValue">The parameterValue <see cref="T:System.Object"/>.</param>
            <exception cref="T:System.NullReferenceException">throws IDbCommand instance is null or parameter not exist with given name.</exception>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetCommandConnection(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            Set Command Connection.
            </summary>
            <param name="command">The command <see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="connection">Database connection <see cref="T:System.Data.IDbConnection"/>.</param>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetCommandValuesToNull(System.Data.IDbCommand)">
            <summary>
            Sets Command values to DbNull.Value.
            </summary>
            <param name="command">The command <see cref="T:System.Data.IDbCommand"/>.</param>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.AddCommandParameters(System.Data.IDbCommand,System.Collections.Generic.List{Simply.Data.Objects.DbCommandParameter})">
            <summary>
            Adds Command Parameters.
            </summary>
            <param name="command">Db command <see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="commandParameters">Database command parameters<see cref="T:System.Collections.Generic.List`1"/>.</param>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.AddCommandParameters(System.Data.IDbCommand,System.Object[])">
            <summary>
            Adds Command Parameters.
            </summary>
            <param name="command">Db command.</param>
            <param name="parameters">Db Command Parameters.</param>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.GetOutParameters(System.Data.IDbCommand)">
            <summary>
            Gets Output Parameters Of Command.
            </summary>
            <param name="command">Db command instance <see cref="T:System.Data.IDbCommand"/>.</param>
            <returns>Db command parameters <see cref="!:DbCommandParameter[]"/>.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.CreateDbParameter(System.Data.IDbCommand,System.String,System.Object,System.Nullable{System.Data.DbType},System.Data.ParameterDirection)">
            <summary>
            Creates the database command parameter.
            </summary>
            <param name="command">Database command.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="dbType">Parameter Db Type.</param>
            <param name="direction">Parameter direction.</param>
            <returns>Returns DbParameterinstance.</returns>
            <exception cref="T:System.ArgumentNullException">command</exception>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.RegenerateDbParameter(System.Data.IDbCommand,Simply.Data.Objects.DbCommandParameter,System.String)">
            <summary>
            Creates DbDataParameter with given DbCommandParameter instance and parameterPrefix.
            </summary>
            <param name="command">IDbCommand instance.</param>
            <param name="parameter">DbCommandParameter instance</param>
            <param name="parameterPrefix">Parameter prefix.</param>
            <returns>Returns DbParameter object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.ExecuteDataReader(System.Data.IDbCommand,System.Nullable{System.Data.CommandBehavior})">
            <summary>
            Executes command and returns IDataReader object instance.
            </summary>
            <param name="command">database command</param>
            <param name="behavior">database command behavior</param>
            <returns>Returns IDataReader object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetTransaction(System.Data.IDbCommand,System.Data.IDbTransaction)">
            <summary>
            The Sets Transaction of IDbCommand instance.
            </summary>
            <param name="command">IDbCommand instance <see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="transaction">IDbTransaction instance <see cref="T:System.Data.IDbTransaction"/>.</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetCommandTimeout(System.Data.IDbCommand,System.Nullable{System.Int32})">
            <summary>
            Sets sql command timeout and returns command.
            </summary>
            <param name="command">db command instance</param>
            <param name="timeout">command timeout value.</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetCommandText(System.Data.IDbCommand,System.String)">
            <summary>
            Sets sql command text and returns command.
            </summary>
            <param name="command">db command instance</param>
            <param name="sqlCommandText">sql Command Text</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.SetCommandType(System.Data.IDbCommand,System.Nullable{System.Data.CommandType})">
            <summary>
            Sets sql command type and returns command.
            </summary>
            <param name="command">db command instance</param>
            <param name="commandType">Sql Command Type</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.IncludeCommandParameters(System.Data.IDbCommand,System.Collections.Generic.List{Simply.Data.Objects.DbCommandParameter})">
            <summary>
            Includes Command Parameters.
            </summary>
            <param name="command">The command <see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="commandParameters">database command parameters<see cref="T:System.Collections.Generic.List`1"/>.</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.IncludeCommandParameters(System.Data.IDbCommand,System.Collections.Generic.List{System.Object},Simply.Data.Interfaces.IQuerySetting)">
            <summary>
            Includes Command Parameters.
            </summary>
            <param name="command">The command <see cref="T:System.Data.IDbCommand"/>.</param>
            <param name="commandParameters">database command parameters<see cref="!:List&lt;System.Object&gt;"/>.</param>
            <param name="querySetting">Query setting object instance.</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.IncludeCommandParameters(System.Data.IDbCommand,System.Object[])">
            <summary>
            Adds Command Parameters.
            </summary>
            <param name="command">Db command.</param>
            <param name="parameters">Db Command Parameters.</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="M:Simply.Data.DbCommandExtensions.CommandExtensions.AddDbParameter(System.Data.IDbCommand,System.Data.Common.DbParameter)">
            <summary>
            Adds parameter into command and return command.
            </summary>
            <param name="command">Db command.</param>
            <param name="parameter">Db Command Parameter.</param>
            <returns>Returns IDbCommand object instance.</returns>
        </member>
        <member name="T:Simply.Data.DbTransactionExtensions.TransactionExtensions">
            <summary>
            Defines the <see cref="T:Simply.Data.DbTransactionExtensions.TransactionExtensions" />.
            </summary>
        </member>
        <member name="M:Simply.Data.DbTransactionExtensions.TransactionExtensions.DisposeTransaction(System.Data.IDbTransaction)">
            <summary>
            Disposes Transaction.
            </summary>
            <param name="transaction">IDbTransaction instance<see cref="T:System.Data.IDbTransaction"/>.</param>
        </member>
        <member name="M:Simply.Data.DbTransactionExtensions.TransactionExtensions.CommitAndDispose(System.Data.IDbTransaction)">
            <summary>
            Commit And Dispose.
            </summary>
            <param name="transaction">IDbTransaction instance<see cref="T:System.Data.IDbTransaction"/>.</param>
        </member>
        <member name="M:Simply.Data.DbTransactionExtensions.TransactionExtensions.RollbackAndDispose(System.Data.IDbTransaction)">
            <summary>
            Rollback And Dispose.
            </summary>
            <param name="transaction">IDbTransaction instance<see cref="T:System.Data.IDbTransaction"/>.</param>
        </member>
        <member name="T:Simply.Data.Enums.DbConnectionTypes">
             <summary>
             Values that represent Database connection types.
             </summary>
            
             <remarks>
             Mustafa SAÇLI, 4.05.2019.
             </remarks>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.MsSql">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.Oracle">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.PostgreSql">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.DB2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.Odbc">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.Oledb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.MySql">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SqlCE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.Firebird">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SQLite">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.VistaDB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SqlBase">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.Synergy">
             <summary>
            
             </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SqlOdbc">
            <summary>
            An enum constant representing the MsSql odbc option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SqlOledb">
            <summary>
            An enum constant representing the MsSql oledb option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.OracleOdbc">
            <summary>
            An enum constant representing the Oracle odbc option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.OracleOledb">
            <summary>
            An enum constant representing the Oracle oledb option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.PostgreSqlOdbc">
            <summary>
            An enum constant representing the PostgreSql odbc option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.PostgreSqlOledb">
            <summary>
            An enum constant representing the PostgreSql oledb option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.DB2Odbc">
            <summary>
            An enum constant representing the DB2 odbc option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.DB2Oledb">
            <summary>
            An enum constant representing the DB2 oledb option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.MySqlOdbc">
            <summary>
            An enum constant representing the MySql odbc option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.MySqlOledb">
            <summary>
            An enum constant representing the MySql oledb option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.FirebirdOdbc">
            <summary>
            An enum constant representing the Firebird odbc option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.FirebirdOledb">
            <summary>
            An enum constant representing the Firebird oledb option. </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SqlBaseOdbc">
            <summary>
            An enum constant representing the SQL base odbc option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SqlBaseOledb">
            <summary>
            An enum constant representing the SQL base oledb option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SynergyOdbc">
            <summary>
            An enum constant representing the synergy ODBC option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SynergyOledb">
            <summary>
            An enum constant representing the synergy oledb option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.NuoDb">
            <summary>
             An enum constant representing the nuo db= 130 option. http://www.nuodb.com/
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SqlDatabase">
            <summary>
             An enum constant representing the SQL database= 131 option. SQLDATABASE.NET,
             http://sqldatabase.net/
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SybaseASA">
            <summary>
            Connection Type enum for SybaseASA database.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SybaseASAOdbc">
            <summary>
            An enum constant representing the Sybase ASA ODBC option.
            </summary>
        </member>
        <member name="F:Simply.Data.Enums.DbConnectionTypes.SybaseASAOledb">
            <summary>
            An enum constant representing the Sybase ASA oledb option.
            </summary>
        </member>
        <member name="T:Simply.Data.Interfaces.IDbCommandResult`1">
            <summary>
            Object contains Result and Output parameter values.
            </summary>
            <typeparam name="T">T class.</typeparam>
        </member>
        <member name="P:Simply.Data.Interfaces.IDbCommandResult`1.AdditionalValues">
            <summary>
            Gets or sets the AdditionalValues
            Parameters for Additional values.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IDbCommandResult`1.OutputParameters">
            <summary>
            Gets or sets the OutputParameters.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IDbCommandResult`1.Result">
            <summary>
            Gets or sets the Result
            Result value.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IDbCommandResult`1.ExecutionResult">
            <summary>
            Execution Result.
            </summary>
        </member>
        <member name="T:Simply.Data.Interfaces.ICommandSetting">
            <summary>
            Command Settings for execution.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ICommandSetting.CommandType">
            <summary>
            Gets Command Type.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ICommandSetting.CommandTimeout">
            <summary>
            Gets Command Timeout.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ICommandSetting.ParameterNamePrefix">
            <summary>
            Gets Parameter Name Prefix for Rebuild Query.
            </summary>
        </member>
        <member name="M:Simply.Data.Interfaces.ICommandSetting.SetCommandType(System.Data.CommandType)">
             <summary>
            
             </summary>
             <param name="commandType">command type.</param>
             <returns>Returns object instance</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.ICommandSetting.SetCommandTimeout(System.Nullable{System.Int32})">
             <summary>
            
             </summary>
             <param name="commandTimeout">command timeout.</param>
             <returns>Returns object instance</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.ICommandSetting.SetParameterNamePrefix(System.Nullable{System.Char})">
            <summary>
            Sets the parameter name prefix.
            </summary>
            <param name="parameterNamePrefix">The parameter name prefix.</param>
            <returns>A ICommandSetting.</returns>
        </member>
        <member name="T:Simply.Data.Interfaces.IPageInfo">
             <summary>
            
             </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IPageInfo.Skip">
            <summary>
            Gets, sets item count for skipping.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IPageInfo.Take">
            <summary>
            Gets, sets item length in a page.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IPageInfo.IsPageable">
            <summary>
            Gets Page info is pageable.
            </summary>
        </member>
        <member name="M:Simply.Data.Interfaces.IPageInfo.SetSkip(System.UInt32)">
             <summary>
            
             </summary>
             <param name="skip">item count for skipping.</param>
             <returns>Returns object instance</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.IPageInfo.SetTake(System.UInt32)">
             <summary>
            
             </summary>
             <param name="take">item count for take.</param>
             <returns>Returns object instance</returns>
        </member>
        <member name="T:Simply.Data.Interfaces.ISimpleDatabase">
             <summary>
            
             </summary>
             <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.QuerySetting">
            <summary>
            Gets the query setting.
            </summary>
            <value>
            The query setting.
            </value>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.ConnectionType">
            <summary>
            Gets the type of the database connection.
            </summary>
            <value>
            The type of the database connection.
            </value>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.CommandLogAction">
            <summary>
            Gets the action for command logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.DbCommandLogAction">
            <summary>
            Gets the action for command logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.InternalExceptionHandler">
            <summary>
            Gets or sets the internal exception handler.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.LogCommand">
            <summary>
            Gets, sets value for simpledbcommand logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.LogDbCommand">
            <summary>
            Gets, sets value for IDbCommand logging.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.AutoClose">
            <summary>
            Gets or sets connection auto close.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.ISimpleDatabase.DefinitorFactory">
            <summary>
            Gets the definitor factory.
            </summary>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.Begin(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.Commit(System.Boolean)">
            <summary>
            Commits the transaction.
            </summary>
            <param name="closeConnectionAtFinal">If true, close connection at final.</param>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.Rollback(System.Boolean)">
            <summary>
            Rollbacks the transaction.
            </summary>
            <param name="closeConnectionAtFinal">If true, close connection at final.</param>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.Close">
            <summary>
            Closes the database connection if there is no alive transaction.
            </summary>
            <exception cref="T:System.Exception">if there is alive transaction.</exception>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.BuildSimpleDbCommandForOdbcQuery(System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,System.Boolean)">
            <summary>
            Builds SimpleDbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="odbcSqlQuery">The query <see cref="T:System.String"/>.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as output else will be throw error.</param>
            <returns>Returns simple database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.BuildSimpleDbCommandForQuery(System.String,System.Object,Simply.Data.Interfaces.ICommandSetting)">
            <summary>
            Builds the simple database command for SQL query.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="commandSetting">The command setting.</param>
            <returns>Returns simple database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.CreateCommand(Simply.Data.Objects.SimpleDbCommand,System.Boolean)">
            <summary>
            Create IDbCommand instance with database command and db transaction for given db connection.
            </summary>
            <param name="simpleDbCommand">database command <see cref="T:Simply.Data.Objects.SimpleDbCommand"/>.</param>
            <param name="connectionShouldBeOpened">if it is true database connection will be opened, else not.</param>
            <returns>Returns DbCommand object instance <see cref="T:System.Data.IDbCommand"/>.</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.CreateDataAdapter">
            <summary>
            Gets DbDataAdapter instance of database connection.
            </summary>
            <returns>Returns DbDataAdapter instance.</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.ApplyPageInfo(Simply.Data.Objects.SimpleDbCommand,Simply.Data.Interfaces.IPageInfo)">
            <summary>
            Applies the paging info into simple db command.
            </summary>
            <param name="dbCommand">The database command.</param>
            <param name="pageInfo">The page information.</param>
            <returns>Applies paging and return simpledbcommand instance.</returns>
        </member>
        <member name="M:Simply.Data.Interfaces.ISimpleDatabase.BuildSimpleDbCommandForJdbcQuery(System.String,System.Object[],Simply.Data.Interfaces.ICommandSetting,System.Boolean)">
            <summary>
            Builds SimpleDbCommand instance for Translate of Odbc Sql Query.
            </summary>
            <param name="jdbcSqlQuery">Jdbc Sql query <see cref="T:System.String"/>
            like #SELECT T1.* FROM TABLE T1 WHERE T1.INT_COLUMN = ?1 AND T2.DATE_COLUMN = ?2 #.</param>
            <param name="parameterValues">Sql command parameter values.</param>
            <param name="commandSetting">The command setting.</param>
            <param name="setOverratedParametersToOutput">if it is true overrated parameters set as output else will be throw error.</param>
            <returns>Returns simple database command object instance <see cref="T:Simply.Data.Objects.SimpleDbCommand" />.</returns>
        </member>
        <member name="T:Simply.Data.Interfaces.IQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix, Last Record Sql Part, Skip and take part.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.ParameterPrefix">
            <summary>
            Gets Parameter Name Prefix.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.Prefix">
            <summary>
            Gets Table and Column Name Prefix.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.Suffix">
            <summary>
            Gets Table and Column Name Suffix.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.StringConcatOperation">
            <summary>
            Gets the string concat operation.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.SkipAndTakeFormat">
            <summary>
            Gets the Skip and take format.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.LastFormat">
            <summary>
            Last Record Sql Format
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.ConnectionType">
            <summary>
            Gets Db Connection Type.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.ParameterSuffix">
            <summary>
            Gets Parameter Suffix.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.SubstringFormat">
            <summary>
            Gets the string substring format.
            </summary>
        </member>
        <member name="P:Simply.Data.Interfaces.IQuerySetting.CountFormat">
            <summary>
            Gets the string count format.
            </summary>
        </member>
        <member name="T:Simply.Data.Objects.BaseDbCommand">
            <summary>
            Base Db Command.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.BaseDbCommand"/> class.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.BaseDbCommand"/> class.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Simply.Data.Objects.BaseDbCommand.CommandText">
            <summary>
            Gets or sets the CommandText.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.BaseDbCommand.IsOdbc">
            <summary>
            Gets, sets command text is odbc query. if it is true database command will be recompile.
            as query, else not.
            </summary>
        </member>
        <member name="F:Simply.Data.Objects.BaseDbCommand.commandParameters">
            <summary>
            command parameters.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.#ctor(System.Collections.Generic.List{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.BaseDbCommand"/> class.
            </summary>
            <param name="commandParameters">The command parameters.</param>
        </member>
        <member name="P:Simply.Data.Objects.BaseDbCommand.CommandParameters">
            <summary>
            Gets, sets command parameters.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.CheckCommandParameters">
            <summary>
            Checks the command parameters.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.AddCommandParameter(System.Object)">
            <summary>
            Adds the command parameter.
            </summary>
            <param name="dbCommandParameter">The db command parameter.</param>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.AddCommandParameters(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds the command parameters.
            </summary>
            <param name="dbCommandParameters">The db command parameters.</param>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.AddCommandParameters(System.Collections.Generic.IEnumerable{Simply.Data.Objects.DbCommandParameter})">
            <summary>
            Adds the command parameters.
            </summary>
            <param name="dbCommandParameters">The db command parameters.</param>
        </member>
        <member name="M:Simply.Data.Objects.BaseDbCommand.AddDbParameter``1(``0)">
             <summary>
            
             </summary>
             <typeparam name="TParameter"></typeparam>
             <param name="dbParameter">db parameter</param>
        </member>
        <member name="T:Simply.Data.Objects.SimpleDbCommand">
            <summary>
            database command.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.#ctor">
            <summary>
            Creates new SimpleDbCommand instance.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.#ctor(System.String,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.SimpleDbCommand"/> class.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="commandType">The command type.</param>
            <param name="commandTimeout">The command timeout.</param>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Nullable{System.Data.CommandType},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.SimpleDbCommand"/> class.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="commandParameters">The command parameters.</param>
            <param name="commandType">The command type.</param>
            <param name="commandTimeout">The command timeout.</param>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.#ctor(System.String,System.Collections.Generic.IEnumerable{Simply.Data.Objects.DbCommandParameter},System.Nullable{System.Data.CommandType},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.SimpleDbCommand"/> class.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="commandParameters">The command parameters.</param>
            <param name="commandType">The command type.</param>
            <param name="commandTimeout">The command timeout.</param>
        </member>
        <member name="P:Simply.Data.Objects.SimpleDbCommand.CommandType">
            <summary>
            Gets or sets the CommandType.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.SimpleDbCommand.CommandTimeout">
            <summary>
            Gets or sets the CommandTimeout
            Command Timeout.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.AddParameter(Simply.Data.Objects.DbCommandParameter)">
            <summary>
            Adds command parameter to list.
            </summary>
            <param name="dbCommandParameter"></param>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.AddParameterAndReturn(Simply.Data.Objects.DbCommandParameter)">
            <summary>
            Adds command parameter to list.
            </summary>
            <param name="dbCommandParameter"></param>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.AddParameters(System.Collections.Generic.IEnumerable{Simply.Data.Objects.DbCommandParameter})">
            <summary>
            Adds command parameters to list.
            </summary>
            <param name="dbCommandParameters">Command Parameters</param>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.ClearParameters">
            <summary>
            clears parameters.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.SimpleDbCommand.ParameterNamePrefix">
            <summary>
            Gets Parameter Name Prefix for Rebuild Query.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.AddDatabaseParameterReturn(System.Object)">
            <summary>
            Adds command parameter to list.
            </summary>
            <param name="dbCommandParameter">db command parameter</param>
            <returns>Returns SimpleDbCommand instance.</returns>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.CreateParameter">
            <summary>
            Creates the parameter.
            </summary>
            <returns>A DbParameter.</returns>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.RecompileQuery(Simply.Data.Interfaces.IQuerySetting,System.Object)">
            <summary>
            Recompiles the parameters.
            </summary>
            <param name="querySetting">The query setting.</param>
            <param name="obj">The value object.</param>
        </member>
        <member name="M:Simply.Data.Objects.SimpleDbCommand.RecompileQuery(Simply.Data.Interfaces.IQuerySetting,System.Collections.Generic.List{Simply.Data.Objects.DbCommandParameter})">
            <summary>
            Recompiles the query.
            </summary>
            <param name="querySetting">The query setting.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Simply.Data.Objects.DbCommandParameter">
            <summary>
            Defines the <see cref="T:Simply.Data.Objects.DbCommandParameter"/>.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.DbCommandParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.DbCommandParameter"/> class.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.DbCommandParameter.#ctor(System.Object,System.Nullable{System.Data.DbType},System.Data.ParameterDirection,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.DbCommandParameter"/> class.
            </summary>
            <param name="value">parameter value <see cref="T:System.Object"/>.</param>
            <param name="dbType">parameter db type.</param>
            <param name="direction">parameter direction.</param>
            <param name="isnullable">is parameter nullable</param>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.ParameterName">
            <summary>
            Gets or sets the ParameterName Parameter Name.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.Value">
            <summary>
            Gets or sets the Value Parameter value.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.Direction">
            <summary>
            Gets or sets the Direction Parameter Direction.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether IsNullable.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.ParameterDbType">
            <summary>
            Gets or sets the DbType Db Type of Parameter.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.ParameterColumnName">
            <summary>
            Gets or sets the ParameterColumnName Parameter Column Name.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.ParameterPrecision">
            <summary>
            Gets or sets the Precision Precision of Parameter.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.ParameterScale">
            <summary>
            Gets or sets the Scale Scale of Parameter.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.ParameterSize">
            <summary>
            Gets or sets the Size of Parameter.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.Precision">
            <summary>
            Gets, Sets Parameter precision.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.Scale">
            <summary>
            Gets, Sets Parameter scale.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.Size">
            <summary>
            Gets, Sets Parameter size.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.DbType">
            <summary>
            Gets, Sets Parameter Db Type.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.SourceColumn">
            <summary>
            Gets, Sets Source Column.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.SourceVersion">
            <summary>
            Gets, Sets Source Version.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.SourceColumnNullMapping">
            <summary>
            Gets, sets Source Column Null Mapping.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.DbCommandParameter.GetDbDataParameter">
            <summary>
            Gets DbCommand Parameter as IDbDataParameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simply.Data.Objects.DbCommandParameter.ResetDbType">
            <summary>
            Resets Database Type.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandParameter.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="T:Simply.Data.Objects.DbCommandResult`1">
            <summary>
            Defines the <see cref="T:Simply.Data.Objects.DbCommandResult`1"/>.
            </summary>
            <typeparam name="T">.</typeparam>
        </member>
        <member name="M:Simply.Data.Objects.DbCommandResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.DbCommandResult`1"/> class.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.DbCommandResult`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.Objects.DbCommandResult`1"/> class.
            </summary>
            <param name="t">The t <see cref="!:T"/>.</param>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandResult`1.AdditionalValues">
            <summary>
            Gets or sets the OutputValues Parameters for Output values.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandResult`1.OutputParameters">
            <summary>
            Gets or sets the OutputParameters.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandResult`1.Result">
            <summary>
            Gets or sets the Result value.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.DbCommandResult`1.ExecutionResult">
            <summary>
            Execution Result.
            </summary>
        </member>
        <member name="T:Simply.Data.Objects.PageInfo">
            <summary>
            Page Info for Getting Database Records.
            </summary>
        </member>
        <member name="F:Simply.Data.Objects.PageInfo.DefaultInstance">
            <summary>
            Default instance for IPageInfo.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.PageInfo.#ctor">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.PageInfo.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Get IPage instance from skip and take.
            </summary>
            <param name="skip">item count for skipping.</param>
            <param name="take">item length in a page</param>
        </member>
        <member name="M:Simply.Data.Objects.PageInfo.GetPageWithPageNumber(System.UInt32,System.UInt32)">
            <summary>
            Get IPage instance from page number and item length.
            </summary>
            <param name="pageNumber">page number</param>
            <param name="pageItemLength">item length in a page</param>
            <returns>Returns IPage instance from page number and item length.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if page number is less than 1 throw this error.</exception>
        </member>
        <member name="M:Simply.Data.Objects.PageInfo.GetPage(System.UInt32,System.UInt32)">
            <summary>
            Get IPage instance from skip and take.
            </summary>
            <param name="skip">item count for skipping.</param>
            <param name="take">item count for take.</param>
            <returns>Returns IPage instance from skip and take.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if page number is less than 1 throw this error.</exception>
        </member>
        <member name="P:Simply.Data.Objects.PageInfo.Skip">
            <summary>
            Gets, sets item count for skipping.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.PageInfo.Take">
            <summary>
            Gets, sets item length in a page.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.PageInfo.IsPageable">
            <summary>
            Gets Page info is pageable.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.PageInfo.SetSkip(System.UInt32)">
             <summary>
            
             </summary>
             <param name="skip">item count for skipping.</param>
             <returns>Returns object instance</returns>
        </member>
        <member name="M:Simply.Data.Objects.PageInfo.SetTake(System.UInt32)">
             <summary>
            
             </summary>
             <param name="take">item count for take.</param>
             <returns>Returns object instance</returns>
        </member>
        <member name="T:Simply.Data.Objects.SimpleCommandSetting">
            <summary>
            Execution Settings for Database Operations.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.SimpleCommandSetting.#ctor">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.SimpleCommandSetting.#ctor(System.Nullable{System.Int32},System.Data.CommandType,System.Nullable{System.Char})">
            <summary>
            Prevents a default instance of the <see cref="T:Simply.Data.Objects.SimpleCommandSetting"/> class from being created.
            </summary>
            <param name="commandTimeout">The command timeout.</param>
            <param name="commandType">The command type.</param>
            <param name="parameterNamePrefix">Parameter Name Prefix for Rebuild Query</param>
        </member>
        <member name="M:Simply.Data.Objects.SimpleCommandSetting.Create(System.Nullable{System.Int32},System.Data.CommandType,System.Nullable{System.Char})">
            <summary>
            Create instance for ICommandSetting with given parameters.
            </summary>
            <param name="commandTimeout">The command timeout.</param>
            <param name="commandType">The command type.</param>
            <param name="parameterNamePrefix">Parameter Name Prefix for Rebuild Query</param>
            <returns>Returns ICommandSetting object instance.</returns>
        </member>
        <member name="M:Simply.Data.Objects.SimpleCommandSetting.New">
            <summary>
            Create empty instance for ICommandSetting.
            </summary>
            <returns>Returns ICommandSetting object instance.</returns>
        </member>
        <member name="P:Simply.Data.Objects.SimpleCommandSetting.CommandType">
            <summary>
            Gets Command Type.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.SimpleCommandSetting.CommandTimeout">
            <summary>
            Gets Command Timeout. Value as second.
            </summary>
        </member>
        <member name="P:Simply.Data.Objects.SimpleCommandSetting.ParameterNamePrefix">
            <summary>
            Gets Parameter Name Prefix for Rebuild Query.
            </summary>
        </member>
        <member name="M:Simply.Data.Objects.SimpleCommandSetting.SetCommandType(System.Data.CommandType)">
             <summary>
            
             </summary>
             <param name="commandType">command type.</param>
             <returns>Returns ICommandSetting object instance.</returns>
        </member>
        <member name="M:Simply.Data.Objects.SimpleCommandSetting.SetCommandTimeout(System.Nullable{System.Int32})">
             <summary>
            
             </summary>
             <param name="commandTimeout">command timeout. Value as second.</param>
             <returns>Returns ICommandSetting object instance.</returns>
        </member>
        <member name="M:Simply.Data.Objects.SimpleCommandSetting.SetParameterNamePrefix(System.Nullable{System.Char})">
            <summary>
            Sets the parameter name prefix.
            </summary>
            <param name="parameterNamePrefix">The parameter name prefix.</param>
            <returns>Returns ICommandSetting object instance.</returns>
        </member>
        <member name="T:Simply.Data.BaseQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.BaseQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.BaseQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.ParameterPrefix">
            <summary>
            Gets Parameter Name Prefix.
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.Prefix">
            <summary>
            Gets Table and Column Name Prefix.
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.Suffix">
            <summary>
            Gets Table and Column Name Suffix.
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.StringConcatOperation">
            <summary>
            Gets the string concat operation.
            </summary>
            <value>
            The string concat operation.
            </value>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.SkipAndTakeFormat">
            <summary>
            Gets the Skip and take format.
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.LastFormat">
            <summary>
            Last Record Sql Format
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.ConnectionType">
            <summary>
            Gets Db Connection Type.
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.ParameterSuffix">
            <summary>
            Gets Parameter Suffix.
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.SubstringFormat">
            <summary>
            Gets the string substring format.
            </summary>
        </member>
        <member name="P:Simply.Data.BaseQuerySetting.CountFormat">
            <summary>
            Gets the string count format.
            </summary>
        </member>
        <member name="T:Simply.Data.DB2QuerySettings">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.DB2QuerySettings.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.DB2QuerySettings"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.QuerySettings.QuerySettingsFactory">
            <summary>
            Defines the <see cref="T:Simply.Data.QuerySettings.QuerySettingsFactory" />.
            </summary>
        </member>
        <member name="M:Simply.Data.QuerySettings.QuerySettingsFactory.GetQuerySetting(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Gets Query Option of DbConnectionType.
            </summary>
            <param name="connectionType">The connType<see cref="T:Simply.Data.Enums.DbConnectionTypes"/>.</param>
            <returns>The <see cref="T:Simply.Data.Interfaces.IQuerySetting"/>.</returns>
        </member>
        <member name="M:Simply.Data.QuerySettings.QuerySettingsFactory.FindQuerySetting(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Finds the query querySetting.
            </summary>
            <param name="connectionType">The connection type.</param>
            <returns>A IQuerySetting.</returns>
        </member>
        <member name="T:Simply.Data.FirebirdQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.FirebirdQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.FirebirdQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.MsSqlQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.MsSqlQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.MsSqlQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.MySqlQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.MySqlQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.MySqlQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.NuodbQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.NuodbQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.NuodbQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.OdbcQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.OdbcQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.OdbcQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.OledbQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.OledbQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.OledbQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.OracleQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.OracleQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.OracleQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.PgSqlQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.PgSqlQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.PgSqlQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.SqlBaseQuerySettings">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.SqlBaseQuerySettings.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.SqlBaseQuerySettings"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.SqlCEQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.SqlCEQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.SqlCEQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.SqlDatabaseQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.SqlDatabaseQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.SqlDatabaseQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.SQLiteQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.SQLiteQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.SQLiteQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.SybaseQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.SybaseQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.SybaseQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.SynergyQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.SynergyQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.SynergyQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Data.VistaDbQuerySetting">
            <summary>
            Represents Parameter Prefix, Column-Table Prefix And Suffix and last IdentityInsert Part.
            </summary>
        </member>
        <member name="M:Simply.Data.VistaDbQuerySetting.#ctor(Simply.Data.Enums.DbConnectionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Simply.Data.VistaDbQuerySetting"/> class.
            </summary>
            <param name="connectionType">Database Connection type.</param>
        </member>
        <member name="T:Simply.Definitor.Attribute.AttributeDefinitor`1">
            <summary>
            Definitor class for Attribute mapping.
            </summary>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.New">
            <summary>
            create a new instance of ISimpleDefinitor.
            </summary>
            <returns>A ISimpleDefinitor.</returns>
        </member>
        <member name="F:Simply.Definitor.Attribute.AttributeDefinitor`1.NumericTypes">
            <summary>
            Defines the NumericTypes.
            </summary>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetColumnNameOfProperty(System.Reflection.PropertyInfo)">
            <summary>
            Get the column name value of property, the column attribute no exist return
            property name.
            </summary>
            <param name="propertyInfo">Property info</param>
            <returns>Returns Column name of property.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetKeyProperties">
            <summary>
            Gets the key properties.
            </summary>
            <returns>An array of PropertyInfos.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetIdentityProperties">
            <summary>
            Gets the identity properties.
            </summary>
            <returns>An array of PropertyInfos.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.PropertyToDbType(System.Reflection.PropertyInfo)">
            <summary>
            Properties the to db type.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>Type as a DbType.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.ToDbType(System.Type)">
            <summary>
            convert type to nullable DbType.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>Type as a DbType.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.ToDbType(System.Object)">
            <summary>
            Tos the db type.
            </summary>
            <param name="obj">The obj.</param>
            <returns>A DbType? .</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.IsSimpleType(System.Type)">
            <summary>
            Is the simple type.
            </summary>
            <param name="type">The type.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetSameProperties``1">
            <summary>
            Gets the same properties.
            </summary>
            <returns>A list of string.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetValidProperties(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets Valid Properties Of Type.
            </summary>
            <param name="includeNotMappedProperties"></param>
            <param name="includeReadonlyProperties"></param>
            <param name="includeComputedProperties"></param>
            <returns>An array of property information.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetPropertyColumns(System.Reflection.PropertyInfo[])">
            <summary>
            Gets the property columns.
            </summary>
            <param name="properties">The properties.</param>
            <returns>A IDictionary.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetNumericTypes">
            <summary>
            Gets the numeric types.
            </summary>
            <returns>A HashSet.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.IsNumeric(System.Type)">
            <summary>
            Is the numeric.
            </summary>
            <param name="type">The type.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetPropertyColumnOfType(System.Type,System.String)">
            <summary>
            Get Column Name from Property Of Type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The property column of type.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetPropertyColumn(System.String)">
            <summary>
            Get Column Name from Property Of Type.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property column of type.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetTableName">
            <summary>
            Gets Table Name.
            </summary>
            <returns>The table name of type.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetSchemaName">
            <summary>
            Gets Schema Name Of Type.
            </summary>
            <returns>The schema name of type.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetColumnName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the column name.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetColumnsReverse(System.Boolean,System.Boolean)">
            <summary>
            Get Column Name-Property Name as dictionary.
            </summary>
            <param name="includeNotMappedProperties"></param>
            <param name="includeComputedProperties"></param>
            <returns>The columns reverse.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetColumns(System.Boolean,System.Boolean)">
            <summary>
            Get Property Name-Column Name as dictionary.
            </summary>
            <param name="includeNotMappedProperties"></param>
            <param name="includeComputedProperties"></param>
            <returns>The columns.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetTableNameOfType(System.Type)">
            <summary>
            Gets Table Name of type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>The table name of type.</returns>
        </member>
        <member name="M:Simply.Definitor.Attribute.AttributeDefinitor`1.GetSchemaNameOfType(System.Type)">
            <summary>
            Gets Schema Name of type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>The schema name of type.</returns>
        </member>
    </members>
</doc>
